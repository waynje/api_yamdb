============================= test session starts =============================
platform win32 -- Python 3.9.10, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- D:\Dev\api_yamdb\venv\Scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: D:\Dev\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 80 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  2%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data0-messege0] PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data1-messege1] PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_singup_length_and_simbols_validation[data2-messege2] PASSED [  6%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup PASSED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user PASSED [  8%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data0-messege0] PASSED [ 10%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data1-messege1] PASSED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data2-messege2] PASSED [ 12%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data3-messege3] PASSED [ 13%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_admin_create_user_length_and_simbols_validation[data4-messege4] PASSED [ 15%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data FAILED [ 16%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 17%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted PASSED [ 18%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_new_confirmation_code_for_existing_user FAILED [ 20%]
tests/test_00_user_registration.py::Test00UserRegistration::test_get_confirmation_code_for_user_created_by_admin FAILED [ 21%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated PASSED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated PASSED [ 23%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated PASSED [ 25%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin PASSED    [ 26%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search PASSED [ 27%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only FAILED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin_bad_requests PASSED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data0-] PASSED [ 31%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_admin_user_creation[data1-без указания роли нового пользователя ] PASSED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_05_03_users_post_response_has_data PASSED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_05_04_users_post_user_superuser PASSED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin FAILED [ 36%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin FAILED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin FAILED [ 38%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator FAILED [ 40%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user FAILED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_not_allowed FAILED [ 42%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin FAILED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator FAILED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user FAILED [ 46%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser FAILED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_me_get FAILED       [ 48%]
tests/test_01_users.py::Test01UserAPI::test_09_02_users_me_delete_not_allowed FAILED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_10_01_users_me_patch FAILED  [ 51%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data0-messege0] FAILED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data1-messege1] FAILED [ 53%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data2-messege2] FAILED [ 55%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data3-messege3] FAILED [ 56%]
tests/test_01_users.py::Test01UserAPI::test_10_02_users_me_has_field_validation[data4-messege4] FAILED [ 57%]
tests/test_01_users.py::Test01UserAPI::test_10_03_users_me_patch_change_role_not_allowed FAILED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_with_admin_user PASSED [ 61%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data0-massage0] PASSED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data1-massage1] PASSED [ 63%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_fields_validation[data2-massage2] PASSED [ 65%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_delete_admin PASSED [ 66%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_check_permission_admin FAILED [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 68%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre PASSED             [ 70%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data0-massage0] PASSED [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data1-massage1] PASSED [ 72%]
tests/test_03_genre.py::Test03GenreAPI::test_03_category_fields_validation[data2-massage2] PASSED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_delete PASSED     [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genres_check_permission FAILED [ 76%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin PASSED       [ 78%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail PASSED     [ 80%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_name_length_validation PASSED [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_05_titles_check_permission FAILED [ 82%]
tests/test_04_title.py::Test04TitleAPI::test_06_titles_detail_put_not_allowed PASSED [ 83%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth PASSED [ 85%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_post PASSED     [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail_get PASSED [ 87%]
tests/test_05_review.py::Test05ReviewAPI::test_04_review_detail_user FAILED [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_05_reviews_detail_moderator_and_admin FAILED [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_06_reviews_detail_put_not_allowed FAILED [ 91%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth PASSED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 93%]
tests/test_06_comment.py::Test06CommentAPI::test_03_comment_detail_get FAILED [ 95%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_detail__user_patch_delete FAILED [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_05_comment_detail_admin_and_moderator FAILED [ 97%]
tests/test_06_comment.py::Test06CommentAPI::test_06_comment_detail_not_auth FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_07_comment_detail_put_not_allowed FAILED [100%]

================================== FAILURES ===================================
________ Test00UserRegistration.test_00_obtain_jwt_token_invalid_data _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000025077BC66A0>
client = <django.test.client.Client object at 0x0000025077BE4B50>

    def test_00_obtain_jwt_token_invalid_data(self, client):
        response = client.post(self.URL_TOKEN)
        assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.URL_TOKEN}` не найдена. Проверьте настройки в '
            '*urls.py*.'
        )
    
        assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Проверьте, что POST-запрос без данных, отправленный на эндпоинт '
            f'`{self.URL_TOKEN}`, возвращает ответ со статусом 400.'
        )
    
        invalid_data = {
            'confirmation_code': 12345
        }
        response = client.post(self.URL_TOKEN, data=invalid_data)
        assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Проверьте, что POST-запрос, отправленный на эндпоинт '
            f'`{self.URL_TOKEN}`и не содержащий информации о `username`, '
            'возвращает ответ со статусом 400.'
        )
    
        invalid_data = {
            'username': 'unexisting_user',
            'confirmation_code': 12345
        }
        response = client.post(self.URL_TOKEN, data=invalid_data)
        assert response.status_code == HTTPStatus.NOT_FOUND, (
            'Проверьте, что POST-запрос с несуществующим `username`, '
            f'отправленный на эндпоинт `{self.URL_TOKEN}`, возвращает ответ '
            'со статусом 404.'
        )
    
        valid_data = {
            'email': 'valid@yamdb.fake',
            'username': 'valid_username'
        }
        response = client.post(self.URL_SIGNUP, data=valid_data)
        assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что POST-запрос с корректными данными, отправленный '
            f'на `{self.URL_SIGNUP}`, возвращает ответ со статусом 200.'
        )
    
        invalid_data = {
            'username': valid_data['username'],
            'confirmation_code': 12345
        }
        response = client.post(self.URL_TOKEN, data=invalid_data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Проверьте, что POST-запрос с корректным `username` и невалидным '
            f'`confirmation_code`, отправленный на эндпоинт `{self.URL_TOKEN}`'
            ', возвращает ответ со статусом 400.'
        )
E       AssertionError: Проверьте, что POST-запрос с корректным `username` и невалидным `confirmation_code`, отправленный на эндпоинт `/api/v1/auth/token/`, возвращает ответ со статусом 400.
E       assert 201 == <HTTPStatus.BAD_REQUEST: 400>
E         +201
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_00_user_registration.py:271: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:224 Not Found: /api/v1/auth/token/
___ Test00UserRegistration.test_get_new_confirmation_code_for_existing_user ___

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000025077BDDAF0>
client = <django.test.client.Client object at 0x0000025077BF2610>

    def test_get_new_confirmation_code_for_existing_user(self, client):
        valid_data = {
            'email': 'test_email@yamdb.fake',
            'username': 'valid_username_1'
        }
        response = client.post(self.URL_SIGNUP, data=valid_data)
        assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что POST-запрос с корректными данными, отправленный '
            f'на эндпоинт `{self.URL_SIGNUP}`, возвращает ответ со статусом '
            '200.'
        )
    
        response = client.post(self.URL_SIGNUP, data=valid_data)
>       assert response.status_code == HTTPStatus.OK, (
            f'Проверьте, что повторный POST-запрос к `{self.URL_SIGNUP}` с '
            'данными зарегистрированного пользователя возвращает ответ со '
            'статусом 200.'
        )
E       AssertionError: Проверьте, что повторный POST-запрос к `/api/v1/auth/signup/` с данными зарегистрированного пользователя возвращает ответ со статусом 200.
E       assert 400 == <HTTPStatus.OK: 200>
E         +400
E         -<HTTPStatus.OK: 200>

tests\test_00_user_registration.py:351: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_ Test00UserRegistration.test_get_confirmation_code_for_user_created_by_admin _

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0000025077BFE6D0>
admin_client = <rest_framework.test.APIClient object at 0x0000025078C4EC10>
client = <django.test.client.Client object at 0x0000025078C4E910>
django_user_model = <class 'user.models.User'>

    def test_get_confirmation_code_for_user_created_by_admin(
            self, admin_client, client, django_user_model
    ):
        user_cnt = django_user_model.objects.count()
        valid_data = {
            'email': 'test_email@yamdb.fake',
            'username': 'valid_username_1'
        }
        admin_client.post(self.URL_ADMIN_CREATE_USER, data=valid_data)
        assert (user_cnt + 1) == django_user_model.objects.count(), (
            'Если POST-запрос администратора на эндпоинт '
            f'`{self.URL_ADMIN_CREATE_USER}` содержит корректные данные - '
            'должен быть создан новый пользователь.'
        )
    
        response = client.post(self.URL_SIGNUP, data=valid_data)
>       assert response.status_code == HTTPStatus.OK, (
            f'Проверьте, что POST-запрос к {self.URL_SIGNUP} с данными '
            'пользователя, созданного администратором,  возвращает ответ '
            'со статусом 200.'
        )
E       AssertionError: Проверьте, что POST-запрос к /api/v1/auth/signup/ с данными пользователя, созданного администратором,  возвращает ответ со статусом 200.
E       assert 400 == <HTTPStatus.OK: 200>
E         +400
E         -<HTTPStatus.OK: 200>

tests\test_00_user_registration.py:373: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
________________ Test01UserAPI.test_04_01_users_get_admin_only ________________

self = <tests.test_01_users.Test01UserAPI object at 0x0000025077BDDE80>
user_client = <rest_framework.test.APIClient object at 0x0000025078C59BE0>
moderator_client = <rest_framework.test.APIClient object at 0x0000025078C59CA0>

    def test_04_01_users_get_admin_only(self, user_client, moderator_client):
        for client in (user_client, moderator_client):
            response = client.get(self.USERS_URL)
            assert response.status_code != HTTPStatus.NOT_FOUND, (
                f'Эндпоинт `{self.USERS_URL}` не найден. Проверьте настройки '
                'в *urls.py*.'
            )
>           assert response.status_code == HTTPStatus.FORBIDDEN, (
                f'Проверьте, что GET-запрос к `{self.USERS_URL}` от '
                'пользователя, не являющегося администратором, возвращает '
                'ответ со статусом 403.'
            )
E           AssertionError: Проверьте, что GET-запрос к `/api/v1/users/` от пользователя, не являющегося администратором, возвращает ответ со статусом 403.
E           assert 200 == <HTTPStatus.FORBIDDEN: 403>
E             +200
E             -<HTTPStatus.FORBIDDEN: 403>

tests\test_01_users.py:144: AssertionError
_______________ Test01UserAPI.test_06_users_username_get_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x0000025077BE4160>
admin_client = <rest_framework.test.APIClient object at 0x0000025078D1E160>
moderator = <User: TestModerator>

    def test_06_users_username_get_admin(self, admin_client, moderator):
        response = admin_client.get(f'{self.USERS_URL}{moderator.username}/')
>       assert response.status_code != HTTPStatus.NOT_FOUND, (
            f'Эндпоинт `{self.USERS_URL}'
            '{username}/` не найден. Проверьте настройки в *urls.py*.'
        )
E       AssertionError: Эндпоинт `/api/v1/users/{username}/` не найден. Проверьте настройки в *urls.py*.
E       assert 404 != <HTTPStatus.NOT_FOUND: 404>
E        +  where 404 = <Response status_code=404, "application/json">.status_code
E        +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests\test_01_users.py:279: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/TestModerator/
_____________ Test01UserAPI.test_06_users_username_get_not_admin ______________

self = <tests.test_01_users.Test01UserAPI object at 0x0000025078D2CFD0>
user_client = <rest_framework.test.APIClient object at 0x0000025078D3E610>
moderator_client = <rest_framework.test.APIClient object at 0x0000025078D3F1F0>
admin = <User: TestAdmin>

    def test_06_users_username_get_not_admin(self, user_client,
                                             moderator_client, admin):
        for test_client in (user_client, moderator_client):
            response = test_client.get(f'{self.USERS_URL}{admin.username}/')
>           assert response.status_code != HTTPStatus.NOT_FOUND, (
                f'Эндпоинт `{self.USERS_URL}'
                '{username}/` не найден. Проверьте настройки в *urls.py*.'
            )
E           AssertionError: Эндпоинт `/api/v1/users/{username}/` не найден. Проверьте настройки в *urls.py*.
E           assert 404 != <HTTPStatus.NOT_FOUND: 404>
E            +  where 404 = <Response status_code=404, "application/json">.status_code
E            +  and   <HTTPStatus.NOT_FOUND: 404> = HTTPStatus.NOT_FOUND

tests\test_01_users.py:305: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/TestAdmin/
_____________ Test01UserAPI.test_07_01_users_username_patch_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x0000025077982B20>
user = <User: TestUser>
admin_client = <rest_framework.test.APIClient object at 0x0000025077B44970>
django_user_model = <class 'user.models.User'>

    def test_07_01_users_username_patch_admin(self, user, admin_client,
                                              django_user_model):
        data = {
            'first_name': 'Admin',
            'last_name': 'Test',
            'bio': 'description'
        }
        response = admin_client.patch(
            f'{self.USERS_URL}{user.username}/', data=data
        )
>       assert response.status_code == HTTPStatus.OK, (
            'Если PATCH-запрос администратора, отправленный к '
            f'`{self.USERS_URL}'
            '{username}/`, содержит корректные данные - должен вернуться '
            'ответ со статусом 200.'
        )
E       AssertionError: Если PATCH-запрос администратора, отправленный к `/api/v1/users/{username}/`, содержит корректные данные - должен вернуться ответ со статусом 200.
E       assert 404 == <HTTPStatus.OK: 200>
E         +404
E         -<HTTPStatus.OK: 200>

tests\test_01_users.py:325: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/TestUser/
___________ Test01UserAPI.test_07_02_users_username_patch_moderator ___________

self = <tests.test_01_users.Test01UserAPI object at 0x00000250777C7F70>
moderator_client = <rest_framework.test.APIClient object at 0x00000250777C78B0>
user = <User: TestUser>, django_user_model = <class 'user.models.User'>

    def test_07_02_users_username_patch_moderator(self,
                                                  moderator_client,
                                                  user,
                                                  django_user_model):
        response = moderator_client.patch(
            f'{self.USERS_URL}{user.username}/', data=self.PATCH_DATA
        )
>       assert response.status_code == HTTPStatus.FORBIDDEN, (
            f'Проверьте, что PATCH-запрос модератора к `{self.USERS_URL}'
            '{username}/` для профиля другого пользователя возвращает ответ '
            'со статусом 403.'
        )
E       AssertionError: Проверьте, что PATCH-запрос модератора к `/api/v1/users/{username}/` для профиля другого пользователя возвращает ответ со статусом 403.
E       assert 404 == <HTTPStatus.FORBIDDEN: 403>
E         +404
E         -<HTTPStatus.FORBIDDEN: 403>

tests\test_01_users.py:379: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/TestUser/
_____________ Test01UserAPI.test_07_03_users_username_patch_user ______________

self = <tests.test_01_users.Test01UserAPI object at 0x0000025077B2B520>
user_client = <rest_framework.test.APIClient object at 0x0000025077B3C340>
user = <User: TestUser>, django_user_model = <class 'user.models.User'>

    def test_07_03_users_username_patch_user(self, user_client, user,
                                             django_user_model):
        response = user_client.patch(
            f'{self.USERS_URL}{user.username}/', data=self.PATCH_DATA
        )
>       assert response.status_code == HTTPStatus.FORBIDDEN, (
            'Проверьте, что PATCH-запрос пользователя с ролью `user` к '
            f'`{self.USERS_URL}'
            '{username}/` возвращает ответ со статусом 403.'
        )
E       AssertionError: Проверьте, что PATCH-запрос пользователя с ролью `user` к `/api/v1/users/{username}/` возвращает ответ со статусом 403.
E       assert 404 == <HTTPStatus.FORBIDDEN: 403>
E         +404
E         -<HTTPStatus.FORBIDDEN: 403>

tests\test_01_users.py:395: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/TestUser/
___________ Test01UserAPI.test_07_05_users_username_put_not_allowed ___________

self = <tests.test_01_users.Test01UserAPI object at 0x00000250777C76D0>
admin_client = <rest_framework.test.APIClient object at 0x00000250777D8E50>
user = <User: TestUser>

    def test_07_05_users_username_put_not_allowed(self, admin_client, user):
        response = admin_client.put(
            f'{self.USERS_URL}{user.username}/', data=self.PATCH_DATA
        )
>       assert response.status_code == HTTPStatus.METHOD_NOT_ALLOWED, (
            f'Проверьте, что PUT-запрос к `{self.USERS_URL}'
            '{username}/` не предусмотрен и возвращает статус 405.'
        )
E       AssertionError: Проверьте, что PUT-запрос к `/api/v1/users/{username}/` не предусмотрен и возвращает статус 405.
E       assert 404 == <HTTPStatus.METHOD_NOT_ALLOWED: 405>
E         +404
E         -<HTTPStatus.METHOD_NOT_ALLOWED: 405>

tests\test_01_users.py:412: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/TestUser/
____________ Test01UserAPI.test_08_01_users_username_delete_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x0000025078C4FC10>
user = <User: TestUser>
admin_client = <rest_framework.test.APIClient object at 0x0000025077B079D0>
django_user_model = <class 'user.models.User'>

    def test_08_01_users_username_delete_admin(self, user, admin_client,
                                               django_user_model):
        users_cnt = django_user_model.objects.count()
        response = admin_client.delete(f'{self.USERS_URL}{user.username}/')
>       assert response.status_code == HTTPStatus.NO_CONTENT, (
            f'Проверьте, что DELETE-запрос администратора к `{self.USERS_URL}'
            '{username}/` возвращает ответ со статусом 204.'
        )
E       AssertionError: Проверьте, что DELETE-запрос администратора к `/api/v1/users/{username}/` возвращает ответ со статусом 204.
E       assert 404 == <HTTPStatus.NO_CONTENT: 204>
E         +404
E         -<HTTPStatus.NO_CONTENT: 204>

tests\test_01_users.py:421: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/TestUser/
__________ Test01UserAPI.test_08_02_users_username_delete_moderator ___________

self = <tests.test_01_users.Test01UserAPI object at 0x000002507782D430>
moderator_client = <rest_framework.test.APIClient object at 0x000002507770FFA0>
user = <User: TestUser>, django_user_model = <class 'user.models.User'>

    def test_08_02_users_username_delete_moderator(self, moderator_client,
                                                   user, django_user_model):
        users_cnt = django_user_model.objects.count()
        response = moderator_client.delete(f'{self.USERS_URL}{user.username}/')
>       assert response.status_code == HTTPStatus.FORBIDDEN, (
            f'Проверьте, что DELETE-запрос модератора к `{self.USERS_URL}'
            '{username}/` возвращает ответ со статусом 403.'
        )
E       AssertionError: Проверьте, что DELETE-запрос модератора к `/api/v1/users/{username}/` возвращает ответ со статусом 403.
E       assert 404 == <HTTPStatus.FORBIDDEN: 403>
E         +404
E         -<HTTPStatus.FORBIDDEN: 403>

tests\test_01_users.py:434: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/TestUser/
_____________ Test01UserAPI.test_08_03_users_username_delete_user _____________

self = <tests.test_01_users.Test01UserAPI object at 0x000002507770F730>
user_client = <rest_framework.test.APIClient object at 0x00000250777A78B0>
user = <User: TestUser>, django_user_model = <class 'user.models.User'>

    def test_08_03_users_username_delete_user(self, user_client, user,
                                              django_user_model):
        users_cnt = django_user_model.objects.count()
        response = user_client.delete(f'{self.USERS_URL}{user.username}/')
>       assert response.status_code == HTTPStatus.FORBIDDEN, (
            'Проверьте, что DELETE-запрос пользователя с ролью `user` к '
            f'`{self.USERS_URL}'
            '{username}/` возвращает ответ со статусом 403.'
        )
E       AssertionError: Проверьте, что DELETE-запрос пользователя с ролью `user` к `/api/v1/users/{username}/` возвращает ответ со статусом 403.
E       assert 404 == <HTTPStatus.FORBIDDEN: 403>
E         +404
E         -<HTTPStatus.FORBIDDEN: 403>

tests\test_01_users.py:447: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/TestUser/
__________ Test01UserAPI.test_08_04_users_username_delete_superuser ___________

self = <tests.test_01_users.Test01UserAPI object at 0x0000025077709730>
user_superuser_client = <rest_framework.test.APIClient object at 0x00000250776F57F0>
user = <User: TestUser>, django_user_model = <class 'user.models.User'>

    def test_08_04_users_username_delete_superuser(self, user_superuser_client,
                                                   user, django_user_model):
        users_cnt = django_user_model.objects.count()
        response = user_superuser_client.delete(
            f'{self.USERS_URL}{user.username}/'
        )
>       assert response.status_code == HTTPStatus.NO_CONTENT, (
            'Проверьте, что DELETE-запрос суперпользователя к '
            f'`{self.USERS_URL}'
            '{username}/` возвращает ответ со статусом 204.'
        )
E       AssertionError: Проверьте, что DELETE-запрос суперпользователя к `/api/v1/users/{username}/` возвращает ответ со статусом 204.
E       assert 404 == <HTTPStatus.NO_CONTENT: 204>
E         +404
E         -<HTTPStatus.NO_CONTENT: 204>

tests\test_01_users.py:464: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/TestUser/
_____________________ Test01UserAPI.test_09_users_me_get ______________________

self = <tests.test_01_users.Test01UserAPI object at 0x00000250777987C0>
user_client = <rest_framework.test.APIClient object at 0x0000025078CB2910>
user = <User: TestUser>

    def test_09_users_me_get(self, user_client, user):
        response = user_client.get(f'{self.USERS_ME_URL}')
>       assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что GET-запрос обычного пользователя к '
            f'`{self.USERS_ME_URL}` возвращает ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что GET-запрос обычного пользователя к `/api/v1/users/me/` возвращает ответ со статусом 200.
E       assert 404 == <HTTPStatus.OK: 200>
E         +404
E         -<HTTPStatus.OK: 200>

tests\test_01_users.py:477: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/me/
____________ Test01UserAPI.test_09_02_users_me_delete_not_allowed _____________

self = <tests.test_01_users.Test01UserAPI object at 0x00000250776EAEB0>
user_client = <rest_framework.test.APIClient object at 0x00000250776F1C40>
user = <User: TestUser>, django_user_model = <class 'user.models.User'>

    def test_09_02_users_me_delete_not_allowed(self, user_client, user,
                                               django_user_model):
        response = user_client.delete(f'{self.USERS_ME_URL}')
>       assert response.status_code == HTTPStatus.METHOD_NOT_ALLOWED, (
            f'Проверьте, что DELETE-запрос к `{self.USERS_ME_URL}` возвращает '
            'ответ со статусом 405.'
        )
E       AssertionError: Проверьте, что DELETE-запрос к `/api/v1/users/me/` возвращает ответ со статусом 405.
E       assert 404 == <HTTPStatus.METHOD_NOT_ALLOWED: 405>
E         +404
E         -<HTTPStatus.METHOD_NOT_ALLOWED: 405>

tests\test_01_users.py:495: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/me/
___________________ Test01UserAPI.test_10_01_users_me_patch ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x0000025078C50A90>
django_user_model = <class 'user.models.User'>
admin_client = <rest_framework.test.APIClient object at 0x0000025077B34BE0>
admin = <User: TestAdmin>
moderator_client = <rest_framework.test.APIClient object at 0x00000250777A7640>
moderator = <User: TestModerator>
user_client = <rest_framework.test.APIClient object at 0x00000250777A7460>
user = <User: TestAdmin>

    def test_10_01_users_me_patch(self, django_user_model, admin_client,
                                  admin, moderator_client, moderator,
                                  user_client, user):
        data = {'bio': 'description'}
    
        for client, user in (
                (admin_client, admin),
                (moderator_client, moderator),
                (user_client, user)
        ):
            response = client.patch(f'{self.USERS_ME_URL}', data=data)
>           assert response.status_code == HTTPStatus.OK, (
                'Проверьте, что PATCH-запрос к '
                f'`{self.USERUSERS_ME_URLS_URL}` доступен пользователям всех '
                'ролей и возвращает ответ со статусом 200.'
            )
E           AttributeError: 'Test01UserAPI' object has no attribute 'USERUSERS_ME_URLS_URL'

tests\test_01_users.py:518: AttributeError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/me/
___ Test01UserAPI.test_10_02_users_me_has_field_validation[data0-messege0] ____

self = <tests.test_01_users.Test01UserAPI object at 0x00000250777A7F40>
user_client = <rest_framework.test.APIClient object at 0x000002507789B4C0>
data = {'email': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@yamdb.fake', 'username': 'valid-username'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` проверяется длина поля `email`: его содержимое не должно быть длиннее 254 символа.',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        request_method = 'PATCH'
        response = user_client.patch(self.USERS_ME_URL, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.USERS_ME_URL,
                request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке PATCH-запроса к `/api/v1/users/me/` проверяется длина поля `email`: его содержимое не должно быть длиннее 254 символа.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_01_users.py:538: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/me/
___ Test01UserAPI.test_10_02_users_me_has_field_validation[data1-messege1] ____

self = <tests.test_01_users.Test01UserAPI object at 0x000002507789B520>
user_client = <rest_framework.test.APIClient object at 0x0000025078D0DC40>
data = {'email': 'valid-email@yamdb.fake', 'username': 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` проверяется длина поля `username`: его содержимое не должно быть длиннее 150 символов.',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        request_method = 'PATCH'
        response = user_client.patch(self.USERS_ME_URL, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.USERS_ME_URL,
                request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке PATCH-запроса к `/api/v1/users/me/` проверяется длина поля `username`: его содержимое не должно быть длиннее 150 символов.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_01_users.py:538: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/me/
___ Test01UserAPI.test_10_02_users_me_has_field_validation[data2-messege2] ____

self = <tests.test_01_users.Test01UserAPI object at 0x000002507788D1F0>
user_client = <rest_framework.test.APIClient object at 0x0000025078C4E280>
data = {'email': 'valid-email@yamdb.fake', 'username': '|-|aTa|_|_|a'}
messege = ('Проверьте, что при обработке {request_method}-запроса к `{url}` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\\w.@+-]+\\Z',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        request_method = 'PATCH'
        response = user_client.patch(self.USERS_ME_URL, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.USERS_ME_URL,
                request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке PATCH-запроса к `/api/v1/users/me/` содержание поля `username` проверяется на соответствие паттерну, указанному в спецификации: ^[\w.@+-]+\Z
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_01_users.py:538: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/me/
___ Test01UserAPI.test_10_02_users_me_has_field_validation[data3-messege3] ____

self = <tests.test_01_users.Test01UserAPI object at 0x0000025078C60400>
user_client = <rest_framework.test.APIClient object at 0x0000025078D557F0>
data = {'email': 'valid-email@yamdb.fake', 'first_name': 'toolonggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg', 'username': 'validname'}
messege = ('Проверьте, что при обработке POST-запроса к `{url}` проверяется длина поля `first_name`: его содержимое не должно быть длиннее 150 символов.',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        request_method = 'PATCH'
        response = user_client.patch(self.USERS_ME_URL, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.USERS_ME_URL,
                request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/me/` проверяется длина поля `first_name`: его содержимое не должно быть длиннее 150 символов.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_01_users.py:538: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/me/
___ Test01UserAPI.test_10_02_users_me_has_field_validation[data4-messege4] ____

self = <tests.test_01_users.Test01UserAPI object at 0x00000250779C7370>
user_client = <rest_framework.test.APIClient object at 0x000002507792B4C0>
data = {'email': 'valid-email@yamdb.fake', 'last_name': 'toolonggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg', 'username': 'validname'}
messege = ('Проверьте, что при обработке POST-запроса к `{url}` проверяется длина поля `last_name`: его содержимое не должно быть длиннее 150 символов.',)

    @pytest.mark.parametrize(
        'data,messege', invalid_data_for_user_patch_and_creation
    )
    def test_10_02_users_me_has_field_validation(self, user_client, data,
                                                 messege):
        request_method = 'PATCH'
        response = user_client.patch(self.USERS_ME_URL, data=data)
>       assert response.status_code == HTTPStatus.BAD_REQUEST, (
            messege[0].format(
                url=self.USERS_ME_URL,
                request_method=request_method
            )
        )
E       AssertionError: Проверьте, что при обработке POST-запроса к `/api/v1/users/me/` проверяется длина поля `last_name`: его содержимое не должно быть длиннее 150 символов.
E       assert 404 == <HTTPStatus.BAD_REQUEST: 400>
E         +404
E         -<HTTPStatus.BAD_REQUEST: 400>

tests\test_01_users.py:538: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/me/
_______ Test01UserAPI.test_10_03_users_me_patch_change_role_not_allowed _______

self = <tests.test_01_users.Test01UserAPI object at 0x000002507789BC70>
user_client = <rest_framework.test.APIClient object at 0x0000025077BFE8B0>
user = <User: TestUser>, django_user_model = <class 'user.models.User'>

    def test_10_03_users_me_patch_change_role_not_allowed(self,
                                                          user_client,
                                                          user,
                                                          django_user_model):
        response = user_client.patch(
            f'{self.USERS_ME_URL}', data=self.PATCH_DATA
        )
>       assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что PATCH-запрос пользователя с ролью `user` к '
            f'`{self.USERS_ME_URL}` возвращает ответ со статусом 200.'
        )
E       AssertionError: Проверьте, что PATCH-запрос пользователя с ролью `user` к `/api/v1/users/me/` возвращает ответ со статусом 200.
E       assert 404 == <HTTPStatus.OK: 200>
E         +404
E         -<HTTPStatus.OK: 200>

tests\test_01_users.py:552: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Not Found: /api/v1/users/me/
__________ Test02CategoryAPI.test_05_category_check_permission_admin __________

self = <tests.test_02_category.Test02CategoryAPI object at 0x0000025077B62280>
client = <django.test.client.Client object at 0x00000250778A7CA0>
user_client = <rest_framework.test.APIClient object at 0x00000250778A7FD0>
moderator_client = <rest_framework.test.APIClient object at 0x00000250778A72E0>
admin_client = <rest_framework.test.APIClient object at 0x00000250778A78B0>

    def test_05_category_check_permission_admin(self, client,
                                                user_client,
                                                moderator_client,
                                                admin_client):
        categories = create_categories(admin_client)
        data = {
            'name': 'Музыка',
            'slug': 'music'
        }
        check_permissions(client, self.CATEGORY_URL, data,
                          'неавторизованного пользователя',
                          categories, HTTPStatus.UNAUTHORIZED)
>       check_permissions(user_client, self.CATEGORY_URL, data,
                          'пользователя с ролью `user`', categories,
                          HTTPStatus.FORBIDDEN)

tests\test_02_category.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x00000250778A7FD0>
url = '/api/v1/categories/', data = {'name': 'Музыка', 'slug': 'music'}
user_role = 'пользователя с ролью `user`'
objects = [{'name': 'Фильм', 'slug': 'films'}, {'name': 'Книги', 'slug': 'books'}]
expected_status = <HTTPStatus.FORBIDDEN: 403>

    def check_permissions(client, url, data, user_role, objects,
                          expected_status):
        sufix = 'slug' if 'slug' in objects[0] else 'id'
    
        response = client.post(url, data=data)
>       assert response.status_code == expected_status, (
            f'Проверьте, что POST-запрос {user_role} к `{url}` возвращает ответ '
            f'со статусом {expected_status}.'
        )
E       AssertionError: Проверьте, что POST-запрос пользователя с ролью `user` к `/api/v1/categories/` возвращает ответ со статусом 403.

tests\utils.py:137: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Unauthorized: /api/v1/categories/
WARNING  django.request:log.py:224 Unauthorized: /api/v1/categories/films/
WARNING  django.request:log.py:224 Unauthorized: /api/v1/categories/films/
_______________ Test03GenreAPI.test_05_genres_check_permission ________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x00000250777FC2E0>
client = <django.test.client.Client object at 0x0000025077717220>
user_client = <rest_framework.test.APIClient object at 0x0000025077717C40>
moderator_client = <rest_framework.test.APIClient object at 0x0000025077717BE0>
admin_client = <rest_framework.test.APIClient object at 0x0000025077703C10>

    def test_05_genres_check_permission(self, client,
                                        user_client,
                                        moderator_client,
                                        admin_client):
        genres = create_genre(admin_client)
        data = {
            'name': 'Боевик',
            'slug': 'action'
        }
        check_permissions(client, self.GENRES_URL, data,
                          'неавторизованного пользователя',
                          genres, HTTPStatus.UNAUTHORIZED)
>       check_permissions(user_client, self.GENRES_URL, data,
                          'пользователя с ролью `user`', genres,
                          HTTPStatus.FORBIDDEN)

tests\test_03_genre.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000025077717C40>
url = '/api/v1/genres/', data = {'name': 'Боевик', 'slug': 'action'}
user_role = 'пользователя с ролью `user`'
objects = [{'name': 'Ужасы', 'slug': 'horror'}, {'name': 'Комедия', 'slug': 'comedy'}, {'name': 'Драма', 'slug': 'drama'}]
expected_status = <HTTPStatus.FORBIDDEN: 403>

    def check_permissions(client, url, data, user_role, objects,
                          expected_status):
        sufix = 'slug' if 'slug' in objects[0] else 'id'
    
        response = client.post(url, data=data)
>       assert response.status_code == expected_status, (
            f'Проверьте, что POST-запрос {user_role} к `{url}` возвращает ответ '
            f'со статусом {expected_status}.'
        )
E       AssertionError: Проверьте, что POST-запрос пользователя с ролью `user` к `/api/v1/genres/` возвращает ответ со статусом 403.

tests\utils.py:137: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Unauthorized: /api/v1/genres/
WARNING  django.request:log.py:224 Unauthorized: /api/v1/genres/horror/
WARNING  django.request:log.py:224 Unauthorized: /api/v1/genres/horror/
_______________ Test04TitleAPI.test_05_titles_check_permission ________________

self = <tests.test_04_title.Test04TitleAPI object at 0x0000025077ADBBE0>
client = <django.test.client.Client object at 0x0000025077B52880>
user_client = <rest_framework.test.APIClient object at 0x0000025077691310>
moderator_client = <rest_framework.test.APIClient object at 0x0000025077691E20>
admin_client = <rest_framework.test.APIClient object at 0x0000025077691BB0>

    def test_05_titles_check_permission(self, client, user_client,
                                        moderator_client, admin_client):
        titles, categories, genres = create_titles(admin_client)
        data = {
            'name': 'Зловещие мертвецы',
            'year': 1981,
            'genre': [genres[2]['slug'], genres[1]['slug']],
            'category': categories[0]['slug'],
            'description': 'This Is My Boomstick! - Ash'
        }
        check_permissions(client, self.TITLES_URL, data,
                          'неавторизованного пользователя', titles,
                          HTTPStatus.UNAUTHORIZED)
>       check_permissions(user_client, self.TITLES_URL, data,
                          'пользователя с ролью `user`', titles,
                          HTTPStatus.FORBIDDEN)

tests\test_04_title.py:338: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

client = <rest_framework.test.APIClient object at 0x0000025077691310>
url = '/api/v1/titles/'
data = {'category': 'films', 'description': 'This Is My Boomstick! - Ash', 'genre': ['drama', 'comedy'], 'name': 'Зловещие мертвецы', ...}
user_role = 'пользователя с ролью `user`'
objects = [{'category': 'films', 'description': 'I`ll be back', 'genre': ['horror', 'comedy'], 'id': 7, ...}, {'category': 'books', 'description': 'Yippie ki yay...', 'genre': ['drama'], 'id': 8, ...}]
expected_status = <HTTPStatus.FORBIDDEN: 403>

    def check_permissions(client, url, data, user_role, objects,
                          expected_status):
        sufix = 'slug' if 'slug' in objects[0] else 'id'
    
        response = client.post(url, data=data)
>       assert response.status_code == expected_status, (
            f'Проверьте, что POST-запрос {user_role} к `{url}` возвращает ответ '
            f'со статусом {expected_status}.'
        )
E       AssertionError: Проверьте, что POST-запрос пользователя с ролью `user` к `/api/v1/titles/` возвращает ответ со статусом 403.

tests\utils.py:137: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Unauthorized: /api/v1/titles/
WARNING  django.request:log.py:224 Unauthorized: /api/v1/titles/7/
WARNING  django.request:log.py:224 Unauthorized: /api/v1/titles/7/
_________________ Test05ReviewAPI.test_04_review_detail_user __________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x000002507789B0A0>
admin_client = <rest_framework.test.APIClient object at 0x0000025078CB4A00>
admin = <User: TestAdmin>, user = <User: TestUser>
user_client = <rest_framework.test.APIClient object at 0x0000025077BF9550>
moderator = <User: TestModerator>
moderator_client = <rest_framework.test.APIClient object at 0x0000025077C09D90>

    def test_04_review_detail_user(self, admin_client, admin, user,
                                   user_client, moderator, moderator_client):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
        reviews, titles = create_reviews(admin_client, author_map)
        new_data = {
            'text': 'Top score',
            'score': 10
        }
        user_review_url = self.REVIEW_DETAIL_URL_TEMPLATE.format(
            title_id=titles[0]['id'], review_id=reviews[1]['id']
        )
    
        response = user_client.patch(user_review_url, data=new_data)
        assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что PATCH-запрос пользователя с ролью `user` к его '
            f'собственному отзыву через `{self.REVIEW_DETAIL_URL_TEMPLATE}` '
            'возвращает ответ со статусом 200.'
        )
        data = response.json()
        assert data.get('text') == new_data['text'], (
            'Проверьте, что ответ на успешный PATCH-запрос к '
            f'`{self.REVIEW_DETAIL_URL_TEMPLATE}` содержит обновлённые данные '
            'отзыва. Сейчас поле `text` не найдено или содержит некорректные '
            'данные.'
        )
    
        response = user_client.get(user_review_url)
        assert response.status_code == HTTPStatus.OK, (
            'Проверьте, что GET-запрос авторизованного пользователя к '
            f'{self.REVIEW_DETAIL_URL_TEMPLATE} возвращает ответ со статусом '
            '200.'
        )
        data = response.json()
        assert_msg_template = (
            'Проверьте, что если в PATCH-запросе авторизованного пользователя '
            'к его собственному отзыву через `{url_template}` содержится поле '
            '`{field}` - то это поле отзыва будет изменено.'
        )
        assert data.get('text') == new_data['text'], (
            assert_msg_template.format(
                url_template=self.REVIEW_DETAIL_URL_TEMPLATE, field='text'
            )
        )
        assert data.get('score') == new_data['score'], (
            assert_msg_template.format(
                url_template=self.REVIEW_DETAIL_URL_TEMPLATE, field='score'
            )
        )
    
        moderator_review_url = self.REVIEW_DETAIL_URL_TEMPLATE.format(
            title_id=titles[0]['id'], review_id=reviews[2]['id']
        )
>       response = user_client.patch(moderator_review_url, data=new_data)

tests\test_05_review.py:315: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\rest_framework\test.py:312: in patch
    response = super().patch(
venv\lib\site-packages\rest_framework\test.py:218: in patch
    return self.generic('PATCH', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    return super().generic(
venv\lib\site-packages\django\test\client.py:473: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:286: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:238: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:719: in request
    self.check_exception(response)
venv\lib\site-packages\django\test\client.py:580: in check_exception
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:47: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:181: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:82: in partial_update
    return self.update(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:65: in update
    instance = self.get_object()
venv\lib\site-packages\rest_framework\generics.py:99: in get_object
    self.check_object_permissions(self.request, obj)
venv\lib\site-packages\rest_framework\views.py:345: in check_object_permissions
    if not permission.has_object_permission(request, self, obj):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.permissions.IsAdminModeratorAuthorOrReadOnly object at 0x00000250778CBC10>
request = <rest_framework.request.Request: PATCH '/api/v1/titles/18/reviews/12/'>
view = <api.views.ReviewViewSet object at 0x00000250778CBB20>
obj = <Review: review number 3>

    def has_object_permission(self, request, view, obj):
        return (request.method in SAFE_METHODS
                or obj.author == request.user
>               or request.user.is_moderator
                or request.user.is_admin)
E       AttributeError: 'User' object has no attribute 'is_moderator'

api_yamdb\api\permissions.py:23: AttributeError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:224 Internal Server Error: /api/v1/titles/18/reviews/12/
Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 47, in inner
    response = get_response(request)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 181, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 82, in partial_update
    return self.update(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 65, in update
    instance = self.get_object()
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\generics.py", line 99, in get_object
    self.check_object_permissions(self.request, obj)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 345, in check_object_permissions
    if not permission.has_object_permission(request, self, obj):
  File "D:\Dev\api_yamdb\api_yamdb\api\permissions.py", line 23, in has_object_permission
    or request.user.is_moderator
AttributeError: 'User' object has no attribute 'is_moderator'
_________ Test05ReviewAPI.test_05_reviews_detail_moderator_and_admin __________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000025078F677C0>
admin_client = <rest_framework.test.APIClient object at 0x0000025078FA1F10>
admin = <User: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000025078FA1E80>
user = <User: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000025078F635E0>
moderator = <User: TestModerator>

    def test_05_reviews_detail_moderator_and_admin(self, admin_client, admin,
                                                   user_client, user,
                                                   moderator_client,
                                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
        reviews, titles = create_reviews(admin_client, author_map)
        new_data = {
            'text': 'Top score',
            'score': 10
        }
    
        for idx, (client, role) in enumerate((
                (moderator_client, 'модератора'),
                (admin_client, 'администратора')
        ), 1):
>           response = client.patch(
                self.REVIEW_DETAIL_URL_TEMPLATE.format(
                    title_id=titles[0]['id'], review_id=reviews[idx]['id']
                ),
                data=new_data
            )

tests\test_05_review.py:364: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
venv\lib\site-packages\rest_framework\test.py:312: in patch
    response = super().patch(
venv\lib\site-packages\rest_framework\test.py:218: in patch
    return self.generic('PATCH', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    return super().generic(
venv\lib\site-packages\django\test\client.py:473: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:286: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:238: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:719: in request
    self.check_exception(response)
venv\lib\site-packages\django\test\client.py:580: in check_exception
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:47: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:181: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:82: in partial_update
    return self.update(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:65: in update
    instance = self.get_object()
venv\lib\site-packages\rest_framework\generics.py:99: in get_object
    self.check_object_permissions(self.request, obj)
venv\lib\site-packages\rest_framework\views.py:345: in check_object_permissions
    if not permission.has_object_permission(request, self, obj):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.permissions.IsAdminModeratorAuthorOrReadOnly object at 0x0000025078E5C850>
request = <rest_framework.request.Request: PATCH '/api/v1/titles/20/reviews/14/'>
view = <api.views.ReviewViewSet object at 0x0000025078E5CBB0>
obj = <Review: review number 2>

    def has_object_permission(self, request, view, obj):
        return (request.method in SAFE_METHODS
                or obj.author == request.user
>               or request.user.is_moderator
                or request.user.is_admin)
E       AttributeError: 'User' object has no attribute 'is_moderator'

api_yamdb\api\permissions.py:23: AttributeError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:224 Internal Server Error: /api/v1/titles/20/reviews/14/
Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 47, in inner
    response = get_response(request)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 181, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 82, in partial_update
    return self.update(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 65, in update
    instance = self.get_object()
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\generics.py", line 99, in get_object
    self.check_object_permissions(self.request, obj)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 345, in check_object_permissions
    if not permission.has_object_permission(request, self, obj):
  File "D:\Dev\api_yamdb\api_yamdb\api\permissions.py", line 23, in has_object_permission
    or request.user.is_moderator
AttributeError: 'User' object has no attribute 'is_moderator'
___________ Test05ReviewAPI.test_06_reviews_detail_put_not_allowed ____________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0000025078E31D00>
admin_client = <rest_framework.test.APIClient object at 0x0000025078E85E20>
admin = <User: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000025078FA8820>
user = <User: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000025078FA81C0>
moderator = <User: TestModerator>

    def test_06_reviews_detail_put_not_allowed(
            self, admin_client, admin, user_client, user, moderator_client,
            moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
        reviews, titles = create_reviews(admin_client, author_map)
        review = reviews[0]
        review['text'] = 'Новвый текст отзыва.'
        response = admin_client.put(
            self.REVIEW_DETAIL_URL_TEMPLATE.format(
                title_id=titles[0]['id'], review_id=reviews[0]['id']
            ),
            data=review
        )
>       assert response.status_code == HTTPStatus.METHOD_NOT_ALLOWED, (
            f'Проверьте, что PUT-запрос к `{self.REVIEW_DETAIL_URL_TEMPLATE} '
            'не предусмотрен и возвращает статус 405.'
        )
E       AssertionError: Проверьте, что PUT-запрос к `/api/v1/titles/{title_id}/reviews/{review_id}/ не предусмотрен и возвращает статус 405.
E       assert 200 == <HTTPStatus.METHOD_NOT_ALLOWED: 405>
E         +200
E         -<HTTPStatus.METHOD_NOT_ALLOWED: 405>

tests\test_05_review.py:412: AssertionError
______________________ Test06CommentAPI.test_02_comment _______________________

self = CommentSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/26/reviews/22/comments/'>,...or = SlugRelatedField(read_only=True, slug_field='username')
    pub_date = DateTimeField(label='Дата', read_only=True)
validated_data = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'test comment', 'title': <Title: Терминатор>}

    def create(self, validated_data):
        """
        We have a bit of extra checking around this in order to provide
        descriptive messages when something goes wrong, but this method is
        essentially just:
    
            return ExampleModel.objects.create(**validated_data)
    
        If there are many to many fields present on the instance then they
        cannot be set until the model is instantiated, in which case the
        implementation is like so:
    
            example_relationship = validated_data.pop('example_relationship')
            instance = ExampleModel.objects.create(**validated_data)
            instance.example_relationship = example_relationship
            return instance
    
        The default implementation also does not handle nested relationships.
        If you want to support writable nested relationships you'll need
        to write an explicit `.create()` method.
        """
        raise_errors_on_nested_writes('create', self, validated_data)
    
        ModelClass = self.Meta.model
    
        # Remove many-to-many relationships from validated_data.
        # They are not valid arguments to the default `.create()` method,
        # as they require that the instance has already been saved.
        info = model_meta.get_field_info(ModelClass)
        many_to_many = {}
        for field_name, relation_info in info.relations.items():
            if relation_info.to_many and (field_name in validated_data):
                many_to_many[field_name] = validated_data.pop(field_name)
    
        try:
>           instance = ModelClass._default_manager.create(**validated_data)

venv\lib\site-packages\rest_framework\serializers.py:962: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <django.db.models.manager.Manager object at 0x000002507778A970>
args = ()
kwargs = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'test comment', 'title': <Title: Терминатор>}

    def manager_method(self, *args, **kwargs):
>       return getattr(self.get_queryset(), name)(*args, **kwargs)

venv\lib\site-packages\django\db\models\manager.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet []>
kwargs = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'test comment', 'title': <Title: Терминатор>}

    def create(self, **kwargs):
        """
        Create a new object with the given kwargs, saving it to the database
        and returning the created object.
        """
>       obj = self.model(**kwargs)

venv\lib\site-packages\django\db\models\query.py:451: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Comment: test comment>, args = ()
kwargs = {'title': <Title: Терминатор>}, cls = <class 'reviews.models.Comment'>
opts = <Options for Comment>, _setattr = <built-in function setattr>
_DEFERRED = <Deferred field>
fields_iter = <tuple_iterator object at 0x0000025077ADBDC0>, val = None
field = <django.db.models.fields.DateTimeField: pub_date>
is_related_object = False, rel_obj = <User: TestAdmin>
property_names = frozenset({'pk'})

    def __init__(self, *args, **kwargs):
        # Alias some things as locals to avoid repeat global lookups
        cls = self.__class__
        opts = self._meta
        _setattr = setattr
        _DEFERRED = DEFERRED
        if opts.abstract:
            raise TypeError('Abstract models cannot be instantiated.')
    
        pre_init.send(sender=cls, args=args, kwargs=kwargs)
    
        # Set up the storage for instance state
        self._state = ModelState()
    
        # There is a rather weird disparity here; if kwargs, it's set, then args
        # overrides it. It should be one or the other; don't duplicate the work
        # The reason for the kwargs check is that standard iterator passes in by
        # args, and instantiation for iteration is 33% faster.
        if len(args) > len(opts.concrete_fields):
            # Daft, but matches old exception sans the err msg.
            raise IndexError("Number of args exceeds number of fields")
    
        if not kwargs:
            fields_iter = iter(opts.concrete_fields)
            # The ordering of the zip calls matter - zip throws StopIteration
            # when an iter throws it. So if the first iter throws it, the second
            # is *not* consumed. We rely on this, so don't change the order
            # without changing the logic.
            for val, field in zip(args, fields_iter):
                if val is _DEFERRED:
                    continue
                _setattr(self, field.attname, val)
        else:
            # Slower, kwargs-ready version.
            fields_iter = iter(opts.fields)
            for val, field in zip(args, fields_iter):
                if val is _DEFERRED:
                    continue
                _setattr(self, field.attname, val)
                kwargs.pop(field.name, None)
    
        # Now we're left with the unprocessed fields that *must* come from
        # keywords, or default.
    
        for field in fields_iter:
            is_related_object = False
            # Virtual field
            if field.attname not in kwargs and field.column is None:
                continue
            if kwargs:
                if isinstance(field.remote_field, ForeignObjectRel):
                    try:
                        # Assume object instance was passed in.
                        rel_obj = kwargs.pop(field.name)
                        is_related_object = True
                    except KeyError:
                        try:
                            # Object instance wasn't passed in -- must be an ID.
                            val = kwargs.pop(field.attname)
                        except KeyError:
                            val = field.get_default()
                else:
                    try:
                        val = kwargs.pop(field.attname)
                    except KeyError:
                        # This is done with an exception rather than the
                        # default argument on pop because we don't want
                        # get_default() to be evaluated, and then not used.
                        # Refs #12057.
                        val = field.get_default()
            else:
                val = field.get_default()
    
            if is_related_object:
                # If we are passed a related instance, set it using the
                # field.name instead of field.attname (e.g. "user" instead of
                # "user_id") so that the object gets properly cached (and type
                # checked) by the RelatedObjectDescriptor.
                if rel_obj is not _DEFERRED:
                    _setattr(self, field.name, rel_obj)
            else:
                if val is not _DEFERRED:
                    _setattr(self, field.attname, val)
    
        if kwargs:
            property_names = opts._property_names
            for prop in tuple(kwargs):
                try:
                    # Any remaining kwargs must correspond to properties or
                    # virtual fields.
                    if prop in property_names or opts.get_field(prop):
                        if kwargs[prop] is not _DEFERRED:
                            _setattr(self, prop, kwargs[prop])
                        del kwargs[prop]
                except (AttributeError, FieldDoesNotExist):
                    pass
            for kwarg in kwargs:
>               raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
E               TypeError: Comment() got an unexpected keyword argument 'title'

venv\lib\site-packages\django\db\models\base.py:503: TypeError

During handling of the above exception, another exception occurred:

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000025077934E50>
admin_client = <rest_framework.test.APIClient object at 0x0000025077B074F0>
admin = <User: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000025077B25100>
user = <User: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x000002507778A910>
moderator = <User: TestModerator>

    def test_02_comment(self, admin_client, admin, user_client, user,
                        moderator_client, moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
        reviews, titles = create_reviews(admin_client, author_map)
        first_review_comment_cnt = 0
    
        data = {}
        response = user_client.post(
            self.COMMENTS_URL_TEMPLATE.format(
                title_id=titles[0]['id'],
                review_id=reviews[0]['id']
            ),
            data=data
        )
        assert response.status_code == HTTPStatus.BAD_REQUEST, (
            'Если POST-запрос пользователя с ролью `user` к '
            f'`{self.COMMENTS_URL_TEMPLATE}` содержит некорректные данные - '
            'должен вернуться ответ со статусом 400.'
        )
    
        post_data = {'text': 'test comment'}
>       create_single_comment(
            admin_client, titles[0]['id'], reviews[0]['id'], post_data['text']
        )

tests\test_06_comment.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:168: in create_single_comment
    response = client.post(
venv\lib\site-packages\rest_framework\test.py:296: in post
    response = super().post(
venv\lib\site-packages\rest_framework\test.py:210: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    return super().generic(
venv\lib\site-packages\django\test\client.py:473: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:286: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:238: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:719: in request
    self.check_exception(response)
venv\lib\site-packages\django\test\client.py:580: in check_exception
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:47: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:181: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:19: in create
    self.perform_create(serializer)
api_yamdb\api\views.py:134: in perform_create
    serializer.save(author=self.request.user, title=title)
venv\lib\site-packages\rest_framework\serializers.py:212: in save
    self.instance = self.create(validated_data)
api_yamdb\api\serializers.py:116: in create
    return super().create(validated_data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = CommentSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/26/reviews/22/comments/'>,...or = SlugRelatedField(read_only=True, slug_field='username')
    pub_date = DateTimeField(label='Дата', read_only=True)
validated_data = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'test comment', 'title': <Title: Терминатор>}

    def create(self, validated_data):
        """
        We have a bit of extra checking around this in order to provide
        descriptive messages when something goes wrong, but this method is
        essentially just:
    
            return ExampleModel.objects.create(**validated_data)
    
        If there are many to many fields present on the instance then they
        cannot be set until the model is instantiated, in which case the
        implementation is like so:
    
            example_relationship = validated_data.pop('example_relationship')
            instance = ExampleModel.objects.create(**validated_data)
            instance.example_relationship = example_relationship
            return instance
    
        The default implementation also does not handle nested relationships.
        If you want to support writable nested relationships you'll need
        to write an explicit `.create()` method.
        """
        raise_errors_on_nested_writes('create', self, validated_data)
    
        ModelClass = self.Meta.model
    
        # Remove many-to-many relationships from validated_data.
        # They are not valid arguments to the default `.create()` method,
        # as they require that the instance has already been saved.
        info = model_meta.get_field_info(ModelClass)
        many_to_many = {}
        for field_name, relation_info in info.relations.items():
            if relation_info.to_many and (field_name in validated_data):
                many_to_many[field_name] = validated_data.pop(field_name)
    
        try:
            instance = ModelClass._default_manager.create(**validated_data)
        except TypeError:
            tb = traceback.format_exc()
            msg = (
                'Got a `TypeError` when calling `%s.%s.create()`. '
                'This may be because you have a writable field on the '
                'serializer class that is not a valid argument to '
                '`%s.%s.create()`. You may need to make the field '
                'read-only, or override the %s.create() method to handle '
                'this correctly.\nOriginal exception was:\n %s' %
                (
                    ModelClass.__name__,
                    ModelClass._default_manager.name,
                    ModelClass.__name__,
                    ModelClass._default_manager.name,
                    self.__class__.__name__,
                    tb
                )
            )
>           raise TypeError(msg)
E           TypeError: Got a `TypeError` when calling `Comment.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `Comment.objects.create()`. You may need to make the field read-only, or override the CommentSerializer.create() method to handle this correctly.
E           Original exception was:
E            Traceback (most recent call last):
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
E               instance = ModelClass._default_manager.create(**validated_data)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
E               return getattr(self.get_queryset(), name)(*args, **kwargs)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
E               obj = self.model(**kwargs)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
E               raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
E           TypeError: Comment() got an unexpected keyword argument 'title'

venv\lib\site-packages\rest_framework\serializers.py:981: TypeError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/26/reviews/22/comments/
ERROR    django.request:log.py:224 Internal Server Error: /api/v1/titles/26/reviews/22/comments/
Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
    obj = self.model(**kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Comment() got an unexpected keyword argument 'title'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 47, in inner
    response = get_response(request)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 181, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 19, in create
    self.perform_create(serializer)
  File "D:\Dev\api_yamdb\api_yamdb\api\views.py", line 134, in perform_create
    serializer.save(author=self.request.user, title=title)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 212, in save
    self.instance = self.create(validated_data)
  File "D:\Dev\api_yamdb\api_yamdb\api\serializers.py", line 116, in create
    return super().create(validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 981, in create
    raise TypeError(msg)
TypeError: Got a `TypeError` when calling `Comment.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `Comment.objects.create()`. You may need to make the field read-only, or override the CommentSerializer.create() method to handle this correctly.
Original exception was:
 Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
    obj = self.model(**kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Comment() got an unexpected keyword argument 'title'
_________________ Test06CommentAPI.test_03_comment_detail_get _________________

self = CommentSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/28/reviews/25/comments/'>,...or = SlugRelatedField(read_only=True, slug_field='username')
    pub_date = DateTimeField(label='Дата', read_only=True)
validated_data = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, validated_data):
        """
        We have a bit of extra checking around this in order to provide
        descriptive messages when something goes wrong, but this method is
        essentially just:
    
            return ExampleModel.objects.create(**validated_data)
    
        If there are many to many fields present on the instance then they
        cannot be set until the model is instantiated, in which case the
        implementation is like so:
    
            example_relationship = validated_data.pop('example_relationship')
            instance = ExampleModel.objects.create(**validated_data)
            instance.example_relationship = example_relationship
            return instance
    
        The default implementation also does not handle nested relationships.
        If you want to support writable nested relationships you'll need
        to write an explicit `.create()` method.
        """
        raise_errors_on_nested_writes('create', self, validated_data)
    
        ModelClass = self.Meta.model
    
        # Remove many-to-many relationships from validated_data.
        # They are not valid arguments to the default `.create()` method,
        # as they require that the instance has already been saved.
        info = model_meta.get_field_info(ModelClass)
        many_to_many = {}
        for field_name, relation_info in info.relations.items():
            if relation_info.to_many and (field_name in validated_data):
                many_to_many[field_name] = validated_data.pop(field_name)
    
        try:
>           instance = ModelClass._default_manager.create(**validated_data)

venv\lib\site-packages\rest_framework\serializers.py:962: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <django.db.models.manager.Manager object at 0x000002507778A970>
args = ()
kwargs = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def manager_method(self, *args, **kwargs):
>       return getattr(self.get_queryset(), name)(*args, **kwargs)

venv\lib\site-packages\django\db\models\manager.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet []>
kwargs = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, **kwargs):
        """
        Create a new object with the given kwargs, saving it to the database
        and returning the created object.
        """
>       obj = self.model(**kwargs)

venv\lib\site-packages\django\db\models\query.py:451: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Comment: comment number 1>, args = ()
kwargs = {'title': <Title: Терминатор>}, cls = <class 'reviews.models.Comment'>
opts = <Options for Comment>, _setattr = <built-in function setattr>
_DEFERRED = <Deferred field>
fields_iter = <tuple_iterator object at 0x0000025078EDD4C0>, val = None
field = <django.db.models.fields.DateTimeField: pub_date>
is_related_object = False, rel_obj = <User: TestAdmin>
property_names = frozenset({'pk'})

    def __init__(self, *args, **kwargs):
        # Alias some things as locals to avoid repeat global lookups
        cls = self.__class__
        opts = self._meta
        _setattr = setattr
        _DEFERRED = DEFERRED
        if opts.abstract:
            raise TypeError('Abstract models cannot be instantiated.')
    
        pre_init.send(sender=cls, args=args, kwargs=kwargs)
    
        # Set up the storage for instance state
        self._state = ModelState()
    
        # There is a rather weird disparity here; if kwargs, it's set, then args
        # overrides it. It should be one or the other; don't duplicate the work
        # The reason for the kwargs check is that standard iterator passes in by
        # args, and instantiation for iteration is 33% faster.
        if len(args) > len(opts.concrete_fields):
            # Daft, but matches old exception sans the err msg.
            raise IndexError("Number of args exceeds number of fields")
    
        if not kwargs:
            fields_iter = iter(opts.concrete_fields)
            # The ordering of the zip calls matter - zip throws StopIteration
            # when an iter throws it. So if the first iter throws it, the second
            # is *not* consumed. We rely on this, so don't change the order
            # without changing the logic.
            for val, field in zip(args, fields_iter):
                if val is _DEFERRED:
                    continue
                _setattr(self, field.attname, val)
        else:
            # Slower, kwargs-ready version.
            fields_iter = iter(opts.fields)
            for val, field in zip(args, fields_iter):
                if val is _DEFERRED:
                    continue
                _setattr(self, field.attname, val)
                kwargs.pop(field.name, None)
    
        # Now we're left with the unprocessed fields that *must* come from
        # keywords, or default.
    
        for field in fields_iter:
            is_related_object = False
            # Virtual field
            if field.attname not in kwargs and field.column is None:
                continue
            if kwargs:
                if isinstance(field.remote_field, ForeignObjectRel):
                    try:
                        # Assume object instance was passed in.
                        rel_obj = kwargs.pop(field.name)
                        is_related_object = True
                    except KeyError:
                        try:
                            # Object instance wasn't passed in -- must be an ID.
                            val = kwargs.pop(field.attname)
                        except KeyError:
                            val = field.get_default()
                else:
                    try:
                        val = kwargs.pop(field.attname)
                    except KeyError:
                        # This is done with an exception rather than the
                        # default argument on pop because we don't want
                        # get_default() to be evaluated, and then not used.
                        # Refs #12057.
                        val = field.get_default()
            else:
                val = field.get_default()
    
            if is_related_object:
                # If we are passed a related instance, set it using the
                # field.name instead of field.attname (e.g. "user" instead of
                # "user_id") so that the object gets properly cached (and type
                # checked) by the RelatedObjectDescriptor.
                if rel_obj is not _DEFERRED:
                    _setattr(self, field.name, rel_obj)
            else:
                if val is not _DEFERRED:
                    _setattr(self, field.attname, val)
    
        if kwargs:
            property_names = opts._property_names
            for prop in tuple(kwargs):
                try:
                    # Any remaining kwargs must correspond to properties or
                    # virtual fields.
                    if prop in property_names or opts.get_field(prop):
                        if kwargs[prop] is not _DEFERRED:
                            _setattr(self, prop, kwargs[prop])
                        del kwargs[prop]
                except (AttributeError, FieldDoesNotExist):
                    pass
            for kwarg in kwargs:
>               raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
E               TypeError: Comment() got an unexpected keyword argument 'title'

venv\lib\site-packages\django\db\models\base.py:503: TypeError

During handling of the above exception, another exception occurred:

self = <tests.test_06_comment.Test06CommentAPI object at 0x00000250790E8B50>
client = <django.test.client.Client object at 0x00000250790E8AF0>
admin_client = <rest_framework.test.APIClient object at 0x0000025079277C40>
admin = <User: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000025079277370>
user = <User: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x00000250790A1790>
moderator = <User: TestModerator>

    def test_03_comment_detail_get(self, client, admin_client, admin,
                                   user_client, user, moderator_client,
                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:271: in create_comments
    response = create_single_comment(
tests\utils.py:168: in create_single_comment
    response = client.post(
venv\lib\site-packages\rest_framework\test.py:296: in post
    response = super().post(
venv\lib\site-packages\rest_framework\test.py:210: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    return super().generic(
venv\lib\site-packages\django\test\client.py:473: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:286: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:238: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:719: in request
    self.check_exception(response)
venv\lib\site-packages\django\test\client.py:580: in check_exception
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:47: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:181: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:19: in create
    self.perform_create(serializer)
api_yamdb\api\views.py:134: in perform_create
    serializer.save(author=self.request.user, title=title)
venv\lib\site-packages\rest_framework\serializers.py:212: in save
    self.instance = self.create(validated_data)
api_yamdb\api\serializers.py:116: in create
    return super().create(validated_data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = CommentSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/28/reviews/25/comments/'>,...or = SlugRelatedField(read_only=True, slug_field='username')
    pub_date = DateTimeField(label='Дата', read_only=True)
validated_data = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, validated_data):
        """
        We have a bit of extra checking around this in order to provide
        descriptive messages when something goes wrong, but this method is
        essentially just:
    
            return ExampleModel.objects.create(**validated_data)
    
        If there are many to many fields present on the instance then they
        cannot be set until the model is instantiated, in which case the
        implementation is like so:
    
            example_relationship = validated_data.pop('example_relationship')
            instance = ExampleModel.objects.create(**validated_data)
            instance.example_relationship = example_relationship
            return instance
    
        The default implementation also does not handle nested relationships.
        If you want to support writable nested relationships you'll need
        to write an explicit `.create()` method.
        """
        raise_errors_on_nested_writes('create', self, validated_data)
    
        ModelClass = self.Meta.model
    
        # Remove many-to-many relationships from validated_data.
        # They are not valid arguments to the default `.create()` method,
        # as they require that the instance has already been saved.
        info = model_meta.get_field_info(ModelClass)
        many_to_many = {}
        for field_name, relation_info in info.relations.items():
            if relation_info.to_many and (field_name in validated_data):
                many_to_many[field_name] = validated_data.pop(field_name)
    
        try:
            instance = ModelClass._default_manager.create(**validated_data)
        except TypeError:
            tb = traceback.format_exc()
            msg = (
                'Got a `TypeError` when calling `%s.%s.create()`. '
                'This may be because you have a writable field on the '
                'serializer class that is not a valid argument to '
                '`%s.%s.create()`. You may need to make the field '
                'read-only, or override the %s.create() method to handle '
                'this correctly.\nOriginal exception was:\n %s' %
                (
                    ModelClass.__name__,
                    ModelClass._default_manager.name,
                    ModelClass.__name__,
                    ModelClass._default_manager.name,
                    self.__class__.__name__,
                    tb
                )
            )
>           raise TypeError(msg)
E           TypeError: Got a `TypeError` when calling `Comment.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `Comment.objects.create()`. You may need to make the field read-only, or override the CommentSerializer.create() method to handle this correctly.
E           Original exception was:
E            Traceback (most recent call last):
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
E               instance = ModelClass._default_manager.create(**validated_data)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
E               return getattr(self.get_queryset(), name)(*args, **kwargs)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
E               obj = self.model(**kwargs)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
E               raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
E           TypeError: Comment() got an unexpected keyword argument 'title'

venv\lib\site-packages\rest_framework\serializers.py:981: TypeError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:224 Internal Server Error: /api/v1/titles/28/reviews/25/comments/
Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
    obj = self.model(**kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Comment() got an unexpected keyword argument 'title'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 47, in inner
    response = get_response(request)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 181, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 19, in create
    self.perform_create(serializer)
  File "D:\Dev\api_yamdb\api_yamdb\api\views.py", line 134, in perform_create
    serializer.save(author=self.request.user, title=title)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 212, in save
    self.instance = self.create(validated_data)
  File "D:\Dev\api_yamdb\api_yamdb\api\serializers.py", line 116, in create
    return super().create(validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 981, in create
    raise TypeError(msg)
TypeError: Got a `TypeError` when calling `Comment.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `Comment.objects.create()`. You may need to make the field read-only, or override the CommentSerializer.create() method to handle this correctly.
Original exception was:
 Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
    obj = self.model(**kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Comment() got an unexpected keyword argument 'title'
_________ Test06CommentAPI.test_04_comment_detail__user_patch_delete __________

self = CommentSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/30/reviews/28/comments/'>,...or = SlugRelatedField(read_only=True, slug_field='username')
    pub_date = DateTimeField(label='Дата', read_only=True)
validated_data = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, validated_data):
        """
        We have a bit of extra checking around this in order to provide
        descriptive messages when something goes wrong, but this method is
        essentially just:
    
            return ExampleModel.objects.create(**validated_data)
    
        If there are many to many fields present on the instance then they
        cannot be set until the model is instantiated, in which case the
        implementation is like so:
    
            example_relationship = validated_data.pop('example_relationship')
            instance = ExampleModel.objects.create(**validated_data)
            instance.example_relationship = example_relationship
            return instance
    
        The default implementation also does not handle nested relationships.
        If you want to support writable nested relationships you'll need
        to write an explicit `.create()` method.
        """
        raise_errors_on_nested_writes('create', self, validated_data)
    
        ModelClass = self.Meta.model
    
        # Remove many-to-many relationships from validated_data.
        # They are not valid arguments to the default `.create()` method,
        # as they require that the instance has already been saved.
        info = model_meta.get_field_info(ModelClass)
        many_to_many = {}
        for field_name, relation_info in info.relations.items():
            if relation_info.to_many and (field_name in validated_data):
                many_to_many[field_name] = validated_data.pop(field_name)
    
        try:
>           instance = ModelClass._default_manager.create(**validated_data)

venv\lib\site-packages\rest_framework\serializers.py:962: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <django.db.models.manager.Manager object at 0x000002507778A970>
args = ()
kwargs = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def manager_method(self, *args, **kwargs):
>       return getattr(self.get_queryset(), name)(*args, **kwargs)

venv\lib\site-packages\django\db\models\manager.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet []>
kwargs = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, **kwargs):
        """
        Create a new object with the given kwargs, saving it to the database
        and returning the created object.
        """
>       obj = self.model(**kwargs)

venv\lib\site-packages\django\db\models\query.py:451: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Comment: comment number 1>, args = ()
kwargs = {'title': <Title: Терминатор>}, cls = <class 'reviews.models.Comment'>
opts = <Options for Comment>, _setattr = <built-in function setattr>
_DEFERRED = <Deferred field>
fields_iter = <tuple_iterator object at 0x0000025077BF9400>, val = None
field = <django.db.models.fields.DateTimeField: pub_date>
is_related_object = False, rel_obj = <User: TestAdmin>
property_names = frozenset({'pk'})

    def __init__(self, *args, **kwargs):
        # Alias some things as locals to avoid repeat global lookups
        cls = self.__class__
        opts = self._meta
        _setattr = setattr
        _DEFERRED = DEFERRED
        if opts.abstract:
            raise TypeError('Abstract models cannot be instantiated.')
    
        pre_init.send(sender=cls, args=args, kwargs=kwargs)
    
        # Set up the storage for instance state
        self._state = ModelState()
    
        # There is a rather weird disparity here; if kwargs, it's set, then args
        # overrides it. It should be one or the other; don't duplicate the work
        # The reason for the kwargs check is that standard iterator passes in by
        # args, and instantiation for iteration is 33% faster.
        if len(args) > len(opts.concrete_fields):
            # Daft, but matches old exception sans the err msg.
            raise IndexError("Number of args exceeds number of fields")
    
        if not kwargs:
            fields_iter = iter(opts.concrete_fields)
            # The ordering of the zip calls matter - zip throws StopIteration
            # when an iter throws it. So if the first iter throws it, the second
            # is *not* consumed. We rely on this, so don't change the order
            # without changing the logic.
            for val, field in zip(args, fields_iter):
                if val is _DEFERRED:
                    continue
                _setattr(self, field.attname, val)
        else:
            # Slower, kwargs-ready version.
            fields_iter = iter(opts.fields)
            for val, field in zip(args, fields_iter):
                if val is _DEFERRED:
                    continue
                _setattr(self, field.attname, val)
                kwargs.pop(field.name, None)
    
        # Now we're left with the unprocessed fields that *must* come from
        # keywords, or default.
    
        for field in fields_iter:
            is_related_object = False
            # Virtual field
            if field.attname not in kwargs and field.column is None:
                continue
            if kwargs:
                if isinstance(field.remote_field, ForeignObjectRel):
                    try:
                        # Assume object instance was passed in.
                        rel_obj = kwargs.pop(field.name)
                        is_related_object = True
                    except KeyError:
                        try:
                            # Object instance wasn't passed in -- must be an ID.
                            val = kwargs.pop(field.attname)
                        except KeyError:
                            val = field.get_default()
                else:
                    try:
                        val = kwargs.pop(field.attname)
                    except KeyError:
                        # This is done with an exception rather than the
                        # default argument on pop because we don't want
                        # get_default() to be evaluated, and then not used.
                        # Refs #12057.
                        val = field.get_default()
            else:
                val = field.get_default()
    
            if is_related_object:
                # If we are passed a related instance, set it using the
                # field.name instead of field.attname (e.g. "user" instead of
                # "user_id") so that the object gets properly cached (and type
                # checked) by the RelatedObjectDescriptor.
                if rel_obj is not _DEFERRED:
                    _setattr(self, field.name, rel_obj)
            else:
                if val is not _DEFERRED:
                    _setattr(self, field.attname, val)
    
        if kwargs:
            property_names = opts._property_names
            for prop in tuple(kwargs):
                try:
                    # Any remaining kwargs must correspond to properties or
                    # virtual fields.
                    if prop in property_names or opts.get_field(prop):
                        if kwargs[prop] is not _DEFERRED:
                            _setattr(self, prop, kwargs[prop])
                        del kwargs[prop]
                except (AttributeError, FieldDoesNotExist):
                    pass
            for kwarg in kwargs:
>               raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
E               TypeError: Comment() got an unexpected keyword argument 'title'

venv\lib\site-packages\django\db\models\base.py:503: TypeError

During handling of the above exception, another exception occurred:

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000025078E65940>
admin_client = <rest_framework.test.APIClient object at 0x0000025078E55460>
admin = <User: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000025078E55FA0>
user = <User: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000025078E55E80>
moderator = <User: TestModerator>

    def test_04_comment_detail__user_patch_delete(self, admin_client, admin,
                                                  user_client, user,
                                                  moderator_client,
                                                  moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:271: in create_comments
    response = create_single_comment(
tests\utils.py:168: in create_single_comment
    response = client.post(
venv\lib\site-packages\rest_framework\test.py:296: in post
    response = super().post(
venv\lib\site-packages\rest_framework\test.py:210: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    return super().generic(
venv\lib\site-packages\django\test\client.py:473: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:286: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:238: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:719: in request
    self.check_exception(response)
venv\lib\site-packages\django\test\client.py:580: in check_exception
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:47: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:181: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:19: in create
    self.perform_create(serializer)
api_yamdb\api\views.py:134: in perform_create
    serializer.save(author=self.request.user, title=title)
venv\lib\site-packages\rest_framework\serializers.py:212: in save
    self.instance = self.create(validated_data)
api_yamdb\api\serializers.py:116: in create
    return super().create(validated_data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = CommentSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/30/reviews/28/comments/'>,...or = SlugRelatedField(read_only=True, slug_field='username')
    pub_date = DateTimeField(label='Дата', read_only=True)
validated_data = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, validated_data):
        """
        We have a bit of extra checking around this in order to provide
        descriptive messages when something goes wrong, but this method is
        essentially just:
    
            return ExampleModel.objects.create(**validated_data)
    
        If there are many to many fields present on the instance then they
        cannot be set until the model is instantiated, in which case the
        implementation is like so:
    
            example_relationship = validated_data.pop('example_relationship')
            instance = ExampleModel.objects.create(**validated_data)
            instance.example_relationship = example_relationship
            return instance
    
        The default implementation also does not handle nested relationships.
        If you want to support writable nested relationships you'll need
        to write an explicit `.create()` method.
        """
        raise_errors_on_nested_writes('create', self, validated_data)
    
        ModelClass = self.Meta.model
    
        # Remove many-to-many relationships from validated_data.
        # They are not valid arguments to the default `.create()` method,
        # as they require that the instance has already been saved.
        info = model_meta.get_field_info(ModelClass)
        many_to_many = {}
        for field_name, relation_info in info.relations.items():
            if relation_info.to_many and (field_name in validated_data):
                many_to_many[field_name] = validated_data.pop(field_name)
    
        try:
            instance = ModelClass._default_manager.create(**validated_data)
        except TypeError:
            tb = traceback.format_exc()
            msg = (
                'Got a `TypeError` when calling `%s.%s.create()`. '
                'This may be because you have a writable field on the '
                'serializer class that is not a valid argument to '
                '`%s.%s.create()`. You may need to make the field '
                'read-only, or override the %s.create() method to handle '
                'this correctly.\nOriginal exception was:\n %s' %
                (
                    ModelClass.__name__,
                    ModelClass._default_manager.name,
                    ModelClass.__name__,
                    ModelClass._default_manager.name,
                    self.__class__.__name__,
                    tb
                )
            )
>           raise TypeError(msg)
E           TypeError: Got a `TypeError` when calling `Comment.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `Comment.objects.create()`. You may need to make the field read-only, or override the CommentSerializer.create() method to handle this correctly.
E           Original exception was:
E            Traceback (most recent call last):
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
E               instance = ModelClass._default_manager.create(**validated_data)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
E               return getattr(self.get_queryset(), name)(*args, **kwargs)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
E               obj = self.model(**kwargs)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
E               raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
E           TypeError: Comment() got an unexpected keyword argument 'title'

venv\lib\site-packages\rest_framework\serializers.py:981: TypeError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:224 Internal Server Error: /api/v1/titles/30/reviews/28/comments/
Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
    obj = self.model(**kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Comment() got an unexpected keyword argument 'title'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 47, in inner
    response = get_response(request)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 181, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 19, in create
    self.perform_create(serializer)
  File "D:\Dev\api_yamdb\api_yamdb\api\views.py", line 134, in perform_create
    serializer.save(author=self.request.user, title=title)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 212, in save
    self.instance = self.create(validated_data)
  File "D:\Dev\api_yamdb\api_yamdb\api\serializers.py", line 116, in create
    return super().create(validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 981, in create
    raise TypeError(msg)
TypeError: Got a `TypeError` when calling `Comment.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `Comment.objects.create()`. You may need to make the field read-only, or override the CommentSerializer.create() method to handle this correctly.
Original exception was:
 Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
    obj = self.model(**kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Comment() got an unexpected keyword argument 'title'
_________ Test06CommentAPI.test_05_comment_detail_admin_and_moderator _________

self = CommentSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/32/reviews/31/comments/'>,...or = SlugRelatedField(read_only=True, slug_field='username')
    pub_date = DateTimeField(label='Дата', read_only=True)
validated_data = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, validated_data):
        """
        We have a bit of extra checking around this in order to provide
        descriptive messages when something goes wrong, but this method is
        essentially just:
    
            return ExampleModel.objects.create(**validated_data)
    
        If there are many to many fields present on the instance then they
        cannot be set until the model is instantiated, in which case the
        implementation is like so:
    
            example_relationship = validated_data.pop('example_relationship')
            instance = ExampleModel.objects.create(**validated_data)
            instance.example_relationship = example_relationship
            return instance
    
        The default implementation also does not handle nested relationships.
        If you want to support writable nested relationships you'll need
        to write an explicit `.create()` method.
        """
        raise_errors_on_nested_writes('create', self, validated_data)
    
        ModelClass = self.Meta.model
    
        # Remove many-to-many relationships from validated_data.
        # They are not valid arguments to the default `.create()` method,
        # as they require that the instance has already been saved.
        info = model_meta.get_field_info(ModelClass)
        many_to_many = {}
        for field_name, relation_info in info.relations.items():
            if relation_info.to_many and (field_name in validated_data):
                many_to_many[field_name] = validated_data.pop(field_name)
    
        try:
>           instance = ModelClass._default_manager.create(**validated_data)

venv\lib\site-packages\rest_framework\serializers.py:962: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <django.db.models.manager.Manager object at 0x000002507778A970>
args = ()
kwargs = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def manager_method(self, *args, **kwargs):
>       return getattr(self.get_queryset(), name)(*args, **kwargs)

venv\lib\site-packages\django\db\models\manager.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet []>
kwargs = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, **kwargs):
        """
        Create a new object with the given kwargs, saving it to the database
        and returning the created object.
        """
>       obj = self.model(**kwargs)

venv\lib\site-packages\django\db\models\query.py:451: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Comment: comment number 1>, args = ()
kwargs = {'title': <Title: Терминатор>}, cls = <class 'reviews.models.Comment'>
opts = <Options for Comment>, _setattr = <built-in function setattr>
_DEFERRED = <Deferred field>
fields_iter = <tuple_iterator object at 0x00000250777F8A60>, val = None
field = <django.db.models.fields.DateTimeField: pub_date>
is_related_object = False, rel_obj = <User: TestAdmin>
property_names = frozenset({'pk'})

    def __init__(self, *args, **kwargs):
        # Alias some things as locals to avoid repeat global lookups
        cls = self.__class__
        opts = self._meta
        _setattr = setattr
        _DEFERRED = DEFERRED
        if opts.abstract:
            raise TypeError('Abstract models cannot be instantiated.')
    
        pre_init.send(sender=cls, args=args, kwargs=kwargs)
    
        # Set up the storage for instance state
        self._state = ModelState()
    
        # There is a rather weird disparity here; if kwargs, it's set, then args
        # overrides it. It should be one or the other; don't duplicate the work
        # The reason for the kwargs check is that standard iterator passes in by
        # args, and instantiation for iteration is 33% faster.
        if len(args) > len(opts.concrete_fields):
            # Daft, but matches old exception sans the err msg.
            raise IndexError("Number of args exceeds number of fields")
    
        if not kwargs:
            fields_iter = iter(opts.concrete_fields)
            # The ordering of the zip calls matter - zip throws StopIteration
            # when an iter throws it. So if the first iter throws it, the second
            # is *not* consumed. We rely on this, so don't change the order
            # without changing the logic.
            for val, field in zip(args, fields_iter):
                if val is _DEFERRED:
                    continue
                _setattr(self, field.attname, val)
        else:
            # Slower, kwargs-ready version.
            fields_iter = iter(opts.fields)
            for val, field in zip(args, fields_iter):
                if val is _DEFERRED:
                    continue
                _setattr(self, field.attname, val)
                kwargs.pop(field.name, None)
    
        # Now we're left with the unprocessed fields that *must* come from
        # keywords, or default.
    
        for field in fields_iter:
            is_related_object = False
            # Virtual field
            if field.attname not in kwargs and field.column is None:
                continue
            if kwargs:
                if isinstance(field.remote_field, ForeignObjectRel):
                    try:
                        # Assume object instance was passed in.
                        rel_obj = kwargs.pop(field.name)
                        is_related_object = True
                    except KeyError:
                        try:
                            # Object instance wasn't passed in -- must be an ID.
                            val = kwargs.pop(field.attname)
                        except KeyError:
                            val = field.get_default()
                else:
                    try:
                        val = kwargs.pop(field.attname)
                    except KeyError:
                        # This is done with an exception rather than the
                        # default argument on pop because we don't want
                        # get_default() to be evaluated, and then not used.
                        # Refs #12057.
                        val = field.get_default()
            else:
                val = field.get_default()
    
            if is_related_object:
                # If we are passed a related instance, set it using the
                # field.name instead of field.attname (e.g. "user" instead of
                # "user_id") so that the object gets properly cached (and type
                # checked) by the RelatedObjectDescriptor.
                if rel_obj is not _DEFERRED:
                    _setattr(self, field.name, rel_obj)
            else:
                if val is not _DEFERRED:
                    _setattr(self, field.attname, val)
    
        if kwargs:
            property_names = opts._property_names
            for prop in tuple(kwargs):
                try:
                    # Any remaining kwargs must correspond to properties or
                    # virtual fields.
                    if prop in property_names or opts.get_field(prop):
                        if kwargs[prop] is not _DEFERRED:
                            _setattr(self, prop, kwargs[prop])
                        del kwargs[prop]
                except (AttributeError, FieldDoesNotExist):
                    pass
            for kwarg in kwargs:
>               raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
E               TypeError: Comment() got an unexpected keyword argument 'title'

venv\lib\site-packages\django\db\models\base.py:503: TypeError

During handling of the above exception, another exception occurred:

self = <tests.test_06_comment.Test06CommentAPI object at 0x0000025078FC4FA0>
admin_client = <rest_framework.test.APIClient object at 0x00000250790EB910>
admin = <User: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x00000250790EB730>
user = <User: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x00000250790EB610>
moderator = <User: TestModerator>

    def test_05_comment_detail_admin_and_moderator(self, admin_client, admin,
                                                   user_client, user,
                                                   moderator_client,
                                                   moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:271: in create_comments
    response = create_single_comment(
tests\utils.py:168: in create_single_comment
    response = client.post(
venv\lib\site-packages\rest_framework\test.py:296: in post
    response = super().post(
venv\lib\site-packages\rest_framework\test.py:210: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    return super().generic(
venv\lib\site-packages\django\test\client.py:473: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:286: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:238: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:719: in request
    self.check_exception(response)
venv\lib\site-packages\django\test\client.py:580: in check_exception
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:47: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:181: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:19: in create
    self.perform_create(serializer)
api_yamdb\api\views.py:134: in perform_create
    serializer.save(author=self.request.user, title=title)
venv\lib\site-packages\rest_framework\serializers.py:212: in save
    self.instance = self.create(validated_data)
api_yamdb\api\serializers.py:116: in create
    return super().create(validated_data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = CommentSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/32/reviews/31/comments/'>,...or = SlugRelatedField(read_only=True, slug_field='username')
    pub_date = DateTimeField(label='Дата', read_only=True)
validated_data = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, validated_data):
        """
        We have a bit of extra checking around this in order to provide
        descriptive messages when something goes wrong, but this method is
        essentially just:
    
            return ExampleModel.objects.create(**validated_data)
    
        If there are many to many fields present on the instance then they
        cannot be set until the model is instantiated, in which case the
        implementation is like so:
    
            example_relationship = validated_data.pop('example_relationship')
            instance = ExampleModel.objects.create(**validated_data)
            instance.example_relationship = example_relationship
            return instance
    
        The default implementation also does not handle nested relationships.
        If you want to support writable nested relationships you'll need
        to write an explicit `.create()` method.
        """
        raise_errors_on_nested_writes('create', self, validated_data)
    
        ModelClass = self.Meta.model
    
        # Remove many-to-many relationships from validated_data.
        # They are not valid arguments to the default `.create()` method,
        # as they require that the instance has already been saved.
        info = model_meta.get_field_info(ModelClass)
        many_to_many = {}
        for field_name, relation_info in info.relations.items():
            if relation_info.to_many and (field_name in validated_data):
                many_to_many[field_name] = validated_data.pop(field_name)
    
        try:
            instance = ModelClass._default_manager.create(**validated_data)
        except TypeError:
            tb = traceback.format_exc()
            msg = (
                'Got a `TypeError` when calling `%s.%s.create()`. '
                'This may be because you have a writable field on the '
                'serializer class that is not a valid argument to '
                '`%s.%s.create()`. You may need to make the field '
                'read-only, or override the %s.create() method to handle '
                'this correctly.\nOriginal exception was:\n %s' %
                (
                    ModelClass.__name__,
                    ModelClass._default_manager.name,
                    ModelClass.__name__,
                    ModelClass._default_manager.name,
                    self.__class__.__name__,
                    tb
                )
            )
>           raise TypeError(msg)
E           TypeError: Got a `TypeError` when calling `Comment.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `Comment.objects.create()`. You may need to make the field read-only, or override the CommentSerializer.create() method to handle this correctly.
E           Original exception was:
E            Traceback (most recent call last):
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
E               instance = ModelClass._default_manager.create(**validated_data)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
E               return getattr(self.get_queryset(), name)(*args, **kwargs)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
E               obj = self.model(**kwargs)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
E               raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
E           TypeError: Comment() got an unexpected keyword argument 'title'

venv\lib\site-packages\rest_framework\serializers.py:981: TypeError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:224 Internal Server Error: /api/v1/titles/32/reviews/31/comments/
Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
    obj = self.model(**kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Comment() got an unexpected keyword argument 'title'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 47, in inner
    response = get_response(request)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 181, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 19, in create
    self.perform_create(serializer)
  File "D:\Dev\api_yamdb\api_yamdb\api\views.py", line 134, in perform_create
    serializer.save(author=self.request.user, title=title)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 212, in save
    self.instance = self.create(validated_data)
  File "D:\Dev\api_yamdb\api_yamdb\api\serializers.py", line 116, in create
    return super().create(validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 981, in create
    raise TypeError(msg)
TypeError: Got a `TypeError` when calling `Comment.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `Comment.objects.create()`. You may need to make the field read-only, or override the CommentSerializer.create() method to handle this correctly.
Original exception was:
 Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
    obj = self.model(**kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Comment() got an unexpected keyword argument 'title'
______________ Test06CommentAPI.test_06_comment_detail_not_auth _______________

self = CommentSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/34/reviews/34/comments/'>,...or = SlugRelatedField(read_only=True, slug_field='username')
    pub_date = DateTimeField(label='Дата', read_only=True)
validated_data = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, validated_data):
        """
        We have a bit of extra checking around this in order to provide
        descriptive messages when something goes wrong, but this method is
        essentially just:
    
            return ExampleModel.objects.create(**validated_data)
    
        If there are many to many fields present on the instance then they
        cannot be set until the model is instantiated, in which case the
        implementation is like so:
    
            example_relationship = validated_data.pop('example_relationship')
            instance = ExampleModel.objects.create(**validated_data)
            instance.example_relationship = example_relationship
            return instance
    
        The default implementation also does not handle nested relationships.
        If you want to support writable nested relationships you'll need
        to write an explicit `.create()` method.
        """
        raise_errors_on_nested_writes('create', self, validated_data)
    
        ModelClass = self.Meta.model
    
        # Remove many-to-many relationships from validated_data.
        # They are not valid arguments to the default `.create()` method,
        # as they require that the instance has already been saved.
        info = model_meta.get_field_info(ModelClass)
        many_to_many = {}
        for field_name, relation_info in info.relations.items():
            if relation_info.to_many and (field_name in validated_data):
                many_to_many[field_name] = validated_data.pop(field_name)
    
        try:
>           instance = ModelClass._default_manager.create(**validated_data)

venv\lib\site-packages\rest_framework\serializers.py:962: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <django.db.models.manager.Manager object at 0x000002507778A970>
args = ()
kwargs = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def manager_method(self, *args, **kwargs):
>       return getattr(self.get_queryset(), name)(*args, **kwargs)

venv\lib\site-packages\django\db\models\manager.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet []>
kwargs = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, **kwargs):
        """
        Create a new object with the given kwargs, saving it to the database
        and returning the created object.
        """
>       obj = self.model(**kwargs)

venv\lib\site-packages\django\db\models\query.py:451: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Comment: comment number 1>, args = ()
kwargs = {'title': <Title: Терминатор>}, cls = <class 'reviews.models.Comment'>
opts = <Options for Comment>, _setattr = <built-in function setattr>
_DEFERRED = <Deferred field>
fields_iter = <tuple_iterator object at 0x00000250790D7D90>, val = None
field = <django.db.models.fields.DateTimeField: pub_date>
is_related_object = False, rel_obj = <User: TestAdmin>
property_names = frozenset({'pk'})

    def __init__(self, *args, **kwargs):
        # Alias some things as locals to avoid repeat global lookups
        cls = self.__class__
        opts = self._meta
        _setattr = setattr
        _DEFERRED = DEFERRED
        if opts.abstract:
            raise TypeError('Abstract models cannot be instantiated.')
    
        pre_init.send(sender=cls, args=args, kwargs=kwargs)
    
        # Set up the storage for instance state
        self._state = ModelState()
    
        # There is a rather weird disparity here; if kwargs, it's set, then args
        # overrides it. It should be one or the other; don't duplicate the work
        # The reason for the kwargs check is that standard iterator passes in by
        # args, and instantiation for iteration is 33% faster.
        if len(args) > len(opts.concrete_fields):
            # Daft, but matches old exception sans the err msg.
            raise IndexError("Number of args exceeds number of fields")
    
        if not kwargs:
            fields_iter = iter(opts.concrete_fields)
            # The ordering of the zip calls matter - zip throws StopIteration
            # when an iter throws it. So if the first iter throws it, the second
            # is *not* consumed. We rely on this, so don't change the order
            # without changing the logic.
            for val, field in zip(args, fields_iter):
                if val is _DEFERRED:
                    continue
                _setattr(self, field.attname, val)
        else:
            # Slower, kwargs-ready version.
            fields_iter = iter(opts.fields)
            for val, field in zip(args, fields_iter):
                if val is _DEFERRED:
                    continue
                _setattr(self, field.attname, val)
                kwargs.pop(field.name, None)
    
        # Now we're left with the unprocessed fields that *must* come from
        # keywords, or default.
    
        for field in fields_iter:
            is_related_object = False
            # Virtual field
            if field.attname not in kwargs and field.column is None:
                continue
            if kwargs:
                if isinstance(field.remote_field, ForeignObjectRel):
                    try:
                        # Assume object instance was passed in.
                        rel_obj = kwargs.pop(field.name)
                        is_related_object = True
                    except KeyError:
                        try:
                            # Object instance wasn't passed in -- must be an ID.
                            val = kwargs.pop(field.attname)
                        except KeyError:
                            val = field.get_default()
                else:
                    try:
                        val = kwargs.pop(field.attname)
                    except KeyError:
                        # This is done with an exception rather than the
                        # default argument on pop because we don't want
                        # get_default() to be evaluated, and then not used.
                        # Refs #12057.
                        val = field.get_default()
            else:
                val = field.get_default()
    
            if is_related_object:
                # If we are passed a related instance, set it using the
                # field.name instead of field.attname (e.g. "user" instead of
                # "user_id") so that the object gets properly cached (and type
                # checked) by the RelatedObjectDescriptor.
                if rel_obj is not _DEFERRED:
                    _setattr(self, field.name, rel_obj)
            else:
                if val is not _DEFERRED:
                    _setattr(self, field.attname, val)
    
        if kwargs:
            property_names = opts._property_names
            for prop in tuple(kwargs):
                try:
                    # Any remaining kwargs must correspond to properties or
                    # virtual fields.
                    if prop in property_names or opts.get_field(prop):
                        if kwargs[prop] is not _DEFERRED:
                            _setattr(self, prop, kwargs[prop])
                        del kwargs[prop]
                except (AttributeError, FieldDoesNotExist):
                    pass
            for kwarg in kwargs:
>               raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
E               TypeError: Comment() got an unexpected keyword argument 'title'

venv\lib\site-packages\django\db\models\base.py:503: TypeError

During handling of the above exception, another exception occurred:

self = <tests.test_06_comment.Test06CommentAPI object at 0x00000250778CB310>
admin_client = <rest_framework.test.APIClient object at 0x0000025078E65B80>
admin = <User: TestAdmin>
client = <django.test.client.Client object at 0x0000025077BDD370>
user_client = <rest_framework.test.APIClient object at 0x0000025078E55BE0>
user = <User: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000025078E55670>
moderator = <User: TestModerator>

    def test_06_comment_detail_not_auth(self, admin_client, admin, client,
                                        user_client, user, moderator_client,
                                        moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:308: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:271: in create_comments
    response = create_single_comment(
tests\utils.py:168: in create_single_comment
    response = client.post(
venv\lib\site-packages\rest_framework\test.py:296: in post
    response = super().post(
venv\lib\site-packages\rest_framework\test.py:210: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    return super().generic(
venv\lib\site-packages\django\test\client.py:473: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:286: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:238: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:719: in request
    self.check_exception(response)
venv\lib\site-packages\django\test\client.py:580: in check_exception
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:47: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:181: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:19: in create
    self.perform_create(serializer)
api_yamdb\api\views.py:134: in perform_create
    serializer.save(author=self.request.user, title=title)
venv\lib\site-packages\rest_framework\serializers.py:212: in save
    self.instance = self.create(validated_data)
api_yamdb\api\serializers.py:116: in create
    return super().create(validated_data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = CommentSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/34/reviews/34/comments/'>,...or = SlugRelatedField(read_only=True, slug_field='username')
    pub_date = DateTimeField(label='Дата', read_only=True)
validated_data = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, validated_data):
        """
        We have a bit of extra checking around this in order to provide
        descriptive messages when something goes wrong, but this method is
        essentially just:
    
            return ExampleModel.objects.create(**validated_data)
    
        If there are many to many fields present on the instance then they
        cannot be set until the model is instantiated, in which case the
        implementation is like so:
    
            example_relationship = validated_data.pop('example_relationship')
            instance = ExampleModel.objects.create(**validated_data)
            instance.example_relationship = example_relationship
            return instance
    
        The default implementation also does not handle nested relationships.
        If you want to support writable nested relationships you'll need
        to write an explicit `.create()` method.
        """
        raise_errors_on_nested_writes('create', self, validated_data)
    
        ModelClass = self.Meta.model
    
        # Remove many-to-many relationships from validated_data.
        # They are not valid arguments to the default `.create()` method,
        # as they require that the instance has already been saved.
        info = model_meta.get_field_info(ModelClass)
        many_to_many = {}
        for field_name, relation_info in info.relations.items():
            if relation_info.to_many and (field_name in validated_data):
                many_to_many[field_name] = validated_data.pop(field_name)
    
        try:
            instance = ModelClass._default_manager.create(**validated_data)
        except TypeError:
            tb = traceback.format_exc()
            msg = (
                'Got a `TypeError` when calling `%s.%s.create()`. '
                'This may be because you have a writable field on the '
                'serializer class that is not a valid argument to '
                '`%s.%s.create()`. You may need to make the field '
                'read-only, or override the %s.create() method to handle '
                'this correctly.\nOriginal exception was:\n %s' %
                (
                    ModelClass.__name__,
                    ModelClass._default_manager.name,
                    ModelClass.__name__,
                    ModelClass._default_manager.name,
                    self.__class__.__name__,
                    tb
                )
            )
>           raise TypeError(msg)
E           TypeError: Got a `TypeError` when calling `Comment.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `Comment.objects.create()`. You may need to make the field read-only, or override the CommentSerializer.create() method to handle this correctly.
E           Original exception was:
E            Traceback (most recent call last):
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
E               instance = ModelClass._default_manager.create(**validated_data)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
E               return getattr(self.get_queryset(), name)(*args, **kwargs)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
E               obj = self.model(**kwargs)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
E               raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
E           TypeError: Comment() got an unexpected keyword argument 'title'

venv\lib\site-packages\rest_framework\serializers.py:981: TypeError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:224 Internal Server Error: /api/v1/titles/34/reviews/34/comments/
Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
    obj = self.model(**kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Comment() got an unexpected keyword argument 'title'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 47, in inner
    response = get_response(request)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 181, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 19, in create
    self.perform_create(serializer)
  File "D:\Dev\api_yamdb\api_yamdb\api\views.py", line 134, in perform_create
    serializer.save(author=self.request.user, title=title)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 212, in save
    self.instance = self.create(validated_data)
  File "D:\Dev\api_yamdb\api_yamdb\api\serializers.py", line 116, in create
    return super().create(validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 981, in create
    raise TypeError(msg)
TypeError: Got a `TypeError` when calling `Comment.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `Comment.objects.create()`. You may need to make the field read-only, or override the CommentSerializer.create() method to handle this correctly.
Original exception was:
 Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
    obj = self.model(**kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Comment() got an unexpected keyword argument 'title'
___________ Test06CommentAPI.test_07_comment_detail_put_not_allowed ___________

self = CommentSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/36/reviews/37/comments/'>,...or = SlugRelatedField(read_only=True, slug_field='username')
    pub_date = DateTimeField(label='Дата', read_only=True)
validated_data = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, validated_data):
        """
        We have a bit of extra checking around this in order to provide
        descriptive messages when something goes wrong, but this method is
        essentially just:
    
            return ExampleModel.objects.create(**validated_data)
    
        If there are many to many fields present on the instance then they
        cannot be set until the model is instantiated, in which case the
        implementation is like so:
    
            example_relationship = validated_data.pop('example_relationship')
            instance = ExampleModel.objects.create(**validated_data)
            instance.example_relationship = example_relationship
            return instance
    
        The default implementation also does not handle nested relationships.
        If you want to support writable nested relationships you'll need
        to write an explicit `.create()` method.
        """
        raise_errors_on_nested_writes('create', self, validated_data)
    
        ModelClass = self.Meta.model
    
        # Remove many-to-many relationships from validated_data.
        # They are not valid arguments to the default `.create()` method,
        # as they require that the instance has already been saved.
        info = model_meta.get_field_info(ModelClass)
        many_to_many = {}
        for field_name, relation_info in info.relations.items():
            if relation_info.to_many and (field_name in validated_data):
                many_to_many[field_name] = validated_data.pop(field_name)
    
        try:
>           instance = ModelClass._default_manager.create(**validated_data)

venv\lib\site-packages\rest_framework\serializers.py:962: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <django.db.models.manager.Manager object at 0x000002507778A970>
args = ()
kwargs = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def manager_method(self, *args, **kwargs):
>       return getattr(self.get_queryset(), name)(*args, **kwargs)

venv\lib\site-packages\django\db\models\manager.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet []>
kwargs = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, **kwargs):
        """
        Create a new object with the given kwargs, saving it to the database
        and returning the created object.
        """
>       obj = self.model(**kwargs)

venv\lib\site-packages\django\db\models\query.py:451: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Comment: comment number 1>, args = ()
kwargs = {'title': <Title: Терминатор>}, cls = <class 'reviews.models.Comment'>
opts = <Options for Comment>, _setattr = <built-in function setattr>
_DEFERRED = <Deferred field>
fields_iter = <tuple_iterator object at 0x000002507922E520>, val = None
field = <django.db.models.fields.DateTimeField: pub_date>
is_related_object = False, rel_obj = <User: TestAdmin>
property_names = frozenset({'pk'})

    def __init__(self, *args, **kwargs):
        # Alias some things as locals to avoid repeat global lookups
        cls = self.__class__
        opts = self._meta
        _setattr = setattr
        _DEFERRED = DEFERRED
        if opts.abstract:
            raise TypeError('Abstract models cannot be instantiated.')
    
        pre_init.send(sender=cls, args=args, kwargs=kwargs)
    
        # Set up the storage for instance state
        self._state = ModelState()
    
        # There is a rather weird disparity here; if kwargs, it's set, then args
        # overrides it. It should be one or the other; don't duplicate the work
        # The reason for the kwargs check is that standard iterator passes in by
        # args, and instantiation for iteration is 33% faster.
        if len(args) > len(opts.concrete_fields):
            # Daft, but matches old exception sans the err msg.
            raise IndexError("Number of args exceeds number of fields")
    
        if not kwargs:
            fields_iter = iter(opts.concrete_fields)
            # The ordering of the zip calls matter - zip throws StopIteration
            # when an iter throws it. So if the first iter throws it, the second
            # is *not* consumed. We rely on this, so don't change the order
            # without changing the logic.
            for val, field in zip(args, fields_iter):
                if val is _DEFERRED:
                    continue
                _setattr(self, field.attname, val)
        else:
            # Slower, kwargs-ready version.
            fields_iter = iter(opts.fields)
            for val, field in zip(args, fields_iter):
                if val is _DEFERRED:
                    continue
                _setattr(self, field.attname, val)
                kwargs.pop(field.name, None)
    
        # Now we're left with the unprocessed fields that *must* come from
        # keywords, or default.
    
        for field in fields_iter:
            is_related_object = False
            # Virtual field
            if field.attname not in kwargs and field.column is None:
                continue
            if kwargs:
                if isinstance(field.remote_field, ForeignObjectRel):
                    try:
                        # Assume object instance was passed in.
                        rel_obj = kwargs.pop(field.name)
                        is_related_object = True
                    except KeyError:
                        try:
                            # Object instance wasn't passed in -- must be an ID.
                            val = kwargs.pop(field.attname)
                        except KeyError:
                            val = field.get_default()
                else:
                    try:
                        val = kwargs.pop(field.attname)
                    except KeyError:
                        # This is done with an exception rather than the
                        # default argument on pop because we don't want
                        # get_default() to be evaluated, and then not used.
                        # Refs #12057.
                        val = field.get_default()
            else:
                val = field.get_default()
    
            if is_related_object:
                # If we are passed a related instance, set it using the
                # field.name instead of field.attname (e.g. "user" instead of
                # "user_id") so that the object gets properly cached (and type
                # checked) by the RelatedObjectDescriptor.
                if rel_obj is not _DEFERRED:
                    _setattr(self, field.name, rel_obj)
            else:
                if val is not _DEFERRED:
                    _setattr(self, field.attname, val)
    
        if kwargs:
            property_names = opts._property_names
            for prop in tuple(kwargs):
                try:
                    # Any remaining kwargs must correspond to properties or
                    # virtual fields.
                    if prop in property_names or opts.get_field(prop):
                        if kwargs[prop] is not _DEFERRED:
                            _setattr(self, prop, kwargs[prop])
                        del kwargs[prop]
                except (AttributeError, FieldDoesNotExist):
                    pass
            for kwarg in kwargs:
>               raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
E               TypeError: Comment() got an unexpected keyword argument 'title'

venv\lib\site-packages\django\db\models\base.py:503: TypeError

During handling of the above exception, another exception occurred:

self = <tests.test_06_comment.Test06CommentAPI object at 0x00000250778CB3D0>
admin_client = <rest_framework.test.APIClient object at 0x0000025078E65190>
admin = <User: TestAdmin>
user_client = <rest_framework.test.APIClient object at 0x0000025078EEB820>
user = <User: TestUser>
moderator_client = <rest_framework.test.APIClient object at 0x0000025078EEBAF0>
moderator = <User: TestModerator>

    def test_07_comment_detail_put_not_allowed(
            self, admin_client, admin, user_client, user, moderator_client,
            moderator):
        author_map = {
            admin: admin_client,
            user: user_client,
            moderator: moderator_client
        }
>       comments, reviews, titles = create_comments(admin_client, author_map)

tests\test_06_comment.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\utils.py:271: in create_comments
    response = create_single_comment(
tests\utils.py:168: in create_single_comment
    response = client.post(
venv\lib\site-packages\rest_framework\test.py:296: in post
    response = super().post(
venv\lib\site-packages\rest_framework\test.py:210: in post
    return self.generic('POST', path, data, content_type, **extra)
venv\lib\site-packages\rest_framework\test.py:234: in generic
    return super().generic(
venv\lib\site-packages\django\test\client.py:473: in generic
    return self.request(**r)
venv\lib\site-packages\rest_framework\test.py:286: in request
    return super().request(**kwargs)
venv\lib\site-packages\rest_framework\test.py:238: in request
    request = super().request(**kwargs)
venv\lib\site-packages\django\test\client.py:719: in request
    self.check_exception(response)
venv\lib\site-packages\django\test\client.py:580: in check_exception
    raise exc_value
venv\lib\site-packages\django\core\handlers\exception.py:47: in inner
    response = get_response(request)
venv\lib\site-packages\django\core\handlers\base.py:181: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
venv\lib\site-packages\rest_framework\mixins.py:19: in create
    self.perform_create(serializer)
api_yamdb\api\views.py:134: in perform_create
    serializer.save(author=self.request.user, title=title)
venv\lib\site-packages\rest_framework\serializers.py:212: in save
    self.instance = self.create(validated_data)
api_yamdb\api\serializers.py:116: in create
    return super().create(validated_data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = CommentSerializer(context={'request': <rest_framework.request.Request: POST '/api/v1/titles/36/reviews/37/comments/'>,...or = SlugRelatedField(read_only=True, slug_field='username')
    pub_date = DateTimeField(label='Дата', read_only=True)
validated_data = {'author': <User: TestAdmin>, 'review': <Review: review number 1>, 'text': 'comment number 1', 'title': <Title: Терминатор>}

    def create(self, validated_data):
        """
        We have a bit of extra checking around this in order to provide
        descriptive messages when something goes wrong, but this method is
        essentially just:
    
            return ExampleModel.objects.create(**validated_data)
    
        If there are many to many fields present on the instance then they
        cannot be set until the model is instantiated, in which case the
        implementation is like so:
    
            example_relationship = validated_data.pop('example_relationship')
            instance = ExampleModel.objects.create(**validated_data)
            instance.example_relationship = example_relationship
            return instance
    
        The default implementation also does not handle nested relationships.
        If you want to support writable nested relationships you'll need
        to write an explicit `.create()` method.
        """
        raise_errors_on_nested_writes('create', self, validated_data)
    
        ModelClass = self.Meta.model
    
        # Remove many-to-many relationships from validated_data.
        # They are not valid arguments to the default `.create()` method,
        # as they require that the instance has already been saved.
        info = model_meta.get_field_info(ModelClass)
        many_to_many = {}
        for field_name, relation_info in info.relations.items():
            if relation_info.to_many and (field_name in validated_data):
                many_to_many[field_name] = validated_data.pop(field_name)
    
        try:
            instance = ModelClass._default_manager.create(**validated_data)
        except TypeError:
            tb = traceback.format_exc()
            msg = (
                'Got a `TypeError` when calling `%s.%s.create()`. '
                'This may be because you have a writable field on the '
                'serializer class that is not a valid argument to '
                '`%s.%s.create()`. You may need to make the field '
                'read-only, or override the %s.create() method to handle '
                'this correctly.\nOriginal exception was:\n %s' %
                (
                    ModelClass.__name__,
                    ModelClass._default_manager.name,
                    ModelClass.__name__,
                    ModelClass._default_manager.name,
                    self.__class__.__name__,
                    tb
                )
            )
>           raise TypeError(msg)
E           TypeError: Got a `TypeError` when calling `Comment.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `Comment.objects.create()`. You may need to make the field read-only, or override the CommentSerializer.create() method to handle this correctly.
E           Original exception was:
E            Traceback (most recent call last):
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
E               instance = ModelClass._default_manager.create(**validated_data)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
E               return getattr(self.get_queryset(), name)(*args, **kwargs)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
E               obj = self.model(**kwargs)
E             File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
E               raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
E           TypeError: Comment() got an unexpected keyword argument 'title'

venv\lib\site-packages\rest_framework\serializers.py:981: TypeError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:224 Internal Server Error: /api/v1/titles/36/reviews/37/comments/
Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
    obj = self.model(**kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Comment() got an unexpected keyword argument 'title'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\exception.py", line 47, in inner
    response = get_response(request)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\core\handlers\base.py", line 181, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\mixins.py", line 19, in create
    self.perform_create(serializer)
  File "D:\Dev\api_yamdb\api_yamdb\api\views.py", line 134, in perform_create
    serializer.save(author=self.request.user, title=title)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 212, in save
    self.instance = self.create(validated_data)
  File "D:\Dev\api_yamdb\api_yamdb\api\serializers.py", line 116, in create
    return super().create(validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 981, in create
    raise TypeError(msg)
TypeError: Got a `TypeError` when calling `Comment.objects.create()`. This may be because you have a writable field on the serializer class that is not a valid argument to `Comment.objects.create()`. You may need to make the field read-only, or override the CommentSerializer.create() method to handle this correctly.
Original exception was:
 Traceback (most recent call last):
  File "D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\serializers.py", line 962, in create
    instance = ModelClass._default_manager.create(**validated_data)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\query.py", line 451, in create
    obj = self.model(**kwargs)
  File "D:\Dev\api_yamdb\venv\lib\site-packages\django\db\models\base.py", line 503, in __init__
    raise TypeError("%s() got an unexpected keyword argument '%s'" % (cls.__name__, kwarg))
TypeError: Comment() got an unexpected keyword argument 'title'
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
============================== warnings summary ===============================
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail
  D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Title'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth
tests/test_05_review.py::Test05ReviewAPI::test_02_review_post
  D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Review'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
  D:\Dev\api_yamdb\venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Comment'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=================================== PASSES ====================================
________________ Test00UserRegistration.test_00_nodata_signup _________________
---------------------------- Captured stdout setup ----------------------------
Operations to perform:
  Synchronize unmigrated apps: django_filters, messages, rest_framework, rest_framework_simplejwt, staticfiles
  Apply all migrations: admin, auth, contenttypes, reviews, sessions, token_blacklist, user
Synchronizing apps without migrations:
  Creating tables...
    Running deferred SQL...
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0001_initial... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying auth.0012_alter_user_first_name_max_length... OK
  Applying user.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying reviews.0001_initial... OK
  Applying reviews.0002_review... OK
  Applying reviews.0002_auto_20231028_1530... OK
  Applying reviews.0003_merge_0002_auto_20231028_1530_0002_review... OK
  Applying reviews.0004_auto_20231029_1510... OK
  Applying reviews.0005_comment_pub_date... OK
  Applying reviews.0006_auto_20231029_1519... OK
  Applying sessions.0001_initial... OK
  Applying token_blacklist.0001_initial... OK
  Applying token_blacklist.0002_outstandingtoken_jti_hex... OK
  Applying token_blacklist.0003_auto_20171017_2007... OK
  Applying token_blacklist.0004_auto_20171017_2013... OK
  Applying token_blacklist.0005_remove_outstandingtoken_jti... OK
  Applying token_blacklist.0006_auto_20171017_2113... OK
  Applying token_blacklist.0007_auto_20171017_2214... OK
  Applying token_blacklist.0008_migrate_to_bigautofield... OK
  Applying token_blacklist.0010_fix_migrate_to_bigautofield... OK
  Applying token_blacklist.0011_linearizes_history... OK
  Applying token_blacklist.0012_alter_outstandingtoken_user... OK
---------------------------- Captured stderr setup ----------------------------
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_____________ Test00UserRegistration.test_00_invalid_data_signup ______________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_ Test00UserRegistration.test_00_singup_length_and_simbols_validation[data0-messege0] _
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_ Test00UserRegistration.test_00_singup_length_and_simbols_validation[data1-messege1] _
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_ Test00UserRegistration.test_00_singup_length_and_simbols_validation[data2-messege2] _
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data0-messege0] _
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data1-messege1] _
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data2-messege2] _
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data3-messege3] _
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
_ Test00UserRegistration.test_00_admin_create_user_length_and_simbols_validation[data4-messege4] _
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
_____ Test00UserRegistration.test_00_registration_me_username_restricted ______
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
______ Test00UserRegistration.test_00_registration_same_email_restricted ______
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
WARNING  django.request:log.py:224 Bad Request: /api/v1/auth/signup/
________________ Test01UserAPI.test_01_users_not_authenticated ________________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Unauthorized: /api/v1/users/
___________ Test01UserAPI.test_02_users_username_not_authenticated ____________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Unauthorized: /api/v1/users/TestAdmin/
______________ Test01UserAPI.test_03_users_me_not_authenticated _______________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Unauthorized: /api/v1/users/me/
___________ Test01UserAPI.test_05_01_users_post_admin_bad_requests ____________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
WARNING  django.request:log.py:224 Bad Request: /api/v1/users/
_____________ Test02CategoryAPI.test_02_category_with_admin_user ______________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/categories/
WARNING  django.request:log.py:224 Bad Request: /api/v1/categories/
____ Test02CategoryAPI.test_03_category_fields_validation[data0-massage0] _____
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/categories/
____ Test02CategoryAPI.test_03_category_fields_validation[data1-massage1] _____
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/categories/
____ Test02CategoryAPI.test_03_category_fields_validation[data2-massage2] _____
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/categories/
_______________ Test02CategoryAPI.test_04_category_delete_admin _______________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Method Not Allowed: /api/v1/categories/books/
WARNING  django.request:log.py:224 Method Not Allowed: /api/v1/categories/books/
________________________ Test03GenreAPI.test_02_genre _________________________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/genres/
WARNING  django.request:log.py:224 Bad Request: /api/v1/genres/
______ Test03GenreAPI.test_03_category_fields_validation[data0-massage0] ______
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/genres/
______ Test03GenreAPI.test_03_category_fields_validation[data1-massage1] ______
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/genres/
______ Test03GenreAPI.test_03_category_fields_validation[data2-massage2] ______
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/genres/
____________________ Test03GenreAPI.test_04_genres_delete _____________________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Method Not Allowed: /api/v1/genres/horror/
WARNING  django.request:log.py:224 Method Not Allowed: /api/v1/genres/horror/
_____________________ Test04TitleAPI.test_02_title_admin ______________________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
____________ Test04TitleAPI.test_04_titles_name_length_validation _____________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/6/
____________ Test04TitleAPI.test_06_titles_detail_put_not_allowed _____________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Method Not Allowed: /api/v1/titles/10/
___________________ Test05ReviewAPI.test_01_review_not_auth ___________________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Unauthorized: /api/v1/titles/12/reviews/
WARNING  django.request:log.py:224 Unauthorized: /api/v1/titles/12/reviews/2/
WARNING  django.request:log.py:224 Unauthorized: /api/v1/titles/12/reviews/2/
_____________________ Test05ReviewAPI.test_02_review_post _____________________
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/14/reviews/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/14/reviews/
WARNING  django.request:log.py:224 Method Not Allowed: /api/v1/titles/14/reviews/
WARNING  django.request:log.py:224 Not Found: /api/v1/titles/999/reviews/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/15/reviews/
WARNING  django.request:log.py:224 Bad Request: /api/v1/titles/14/reviews/
================= 35 failed, 45 passed, 6 warnings in 25.50s ==================
